{"version":3,"sources":["../../src/utils/qetag.js","../../src/utils/url.ts","../../src/utils/index.ts","../../src/platform/cos.ts","../../src/platform/utils.ts","../../src/platform/oss.ts","../../src/platform/upyun.ts","../../src/platform/github.ts","../../src/platform/qiniu.ts","../../src/platform/local.ts","../../src/platform/client.ts","../../src/platform/const.ts","../../src/platform/index.ts","../../src/core.ts","../../src/index.ts"],"sourcesContent":["// 计算文件的eTag，参数为buffer或者readableStream或者文件路径\nexport function getEtag(buffer, callback) {\n  // 判断传入的参数是buffer还是stream还是filepath\n  let mode = 'buffer'\n\n  if (typeof buffer === 'string') {\n    // eslint-disable-next-line no-param-reassign\n    buffer = require('fs').createReadStream(buffer)\n    mode = 'stream'\n  } else if (buffer instanceof require('stream')) {\n    mode = 'stream'\n  }\n\n  // sha1算法\n  const sha1 = function (content) {\n    const crypto = require('crypto')\n    const sha1 = crypto.createHash('sha1')\n    sha1.update(content)\n    return sha1.digest()\n  }\n\n  // 以4M为单位分割\n  const blockSize = 4 * 1024 * 1024\n  const sha1String = []\n  let prefix = 0x16\n  let blockCount = 0\n\n  // eslint-disable-next-line default-case\n  switch (mode) {\n    case 'buffer':\n      // eslint-disable-next-line\n      const bufferSize = buffer.length;\n      blockCount = Math.ceil(bufferSize / blockSize)\n\n      for (let i = 0; i < blockCount; i++) {\n        sha1String.push(sha1(buffer.slice(i * blockSize, (i + 1) * blockSize)))\n      }\n      process.nextTick(function () {\n        callback(calcEtag())\n      })\n      break\n    case 'stream':\n      // eslint-disable-next-line no-case-declarations\n      const stream = buffer\n      stream.on('readable', function () {\n        let chunk\n        // eslint-disable-next-line no-cond-assign\n        while ((chunk = stream.read(blockSize))) {\n          sha1String.push(sha1(chunk))\n          blockCount++\n        }\n      })\n      stream.on('end', function () {\n        callback(calcEtag())\n      })\n      break\n  }\n\n  function calcEtag() {\n    if (!sha1String.length) {\n      return 'Fto5o-5ea0sNMlW_75VgGJCv2AcJ'\n    }\n    let sha1Buffer = Buffer.concat(sha1String, blockCount * 20)\n\n    // 如果大于4M，则对各个块的sha1结果再次sha1\n    if (blockCount > 1) {\n      prefix = 0x96\n      sha1Buffer = sha1(sha1Buffer)\n    }\n\n    sha1Buffer = Buffer.concat([Buffer.from([prefix]), sha1Buffer], sha1Buffer.length + 1)\n\n    return sha1Buffer.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-')\n  }\n}\n","import imgSize from 'image-size'\n\n/**\n * 通过图片url获取文件type, 不含\".\"\n * @param url\n */\nexport const getFileTypeFromUrl = (url: string) => {\n  const reg = /[^/]+(?!.*\\/)/g\n  const imgName = url\n    .match(reg)\n    ?.filter((item) => item)\n    .pop()\n  // 去除#\n  let filename = ''\n  let filetype = ''\n  if (imgName) {\n    filename = imgName.split('.')[0]\n    filetype = imgName.split('.')[1].split('?')[0].split('#')[0]\n    return {\n      name: filename,\n      type: filetype,\n    }\n  }\n}\n\nexport const getFileTypeFromBuffer = (buffer: Buffer): any => {\n  return imgSize(buffer).type\n}\n\ninterface FileType {\n  type: string\n  name?: string\n}\n\nexport const getFileType = (url: string, buffer: Buffer) => {\n  let file: FileType | undefined = getFileTypeFromUrl(url)\n  if (!file) {\n    file = {\n      type: getFileTypeFromBuffer(buffer),\n    }\n  }\n  return file\n}\n","// @ts-ignore\nimport { getEtag } from './qetag.js'\nimport { getFileType, getFileTypeFromBuffer, getFileTypeFromUrl } from './url'\nimport { ImageUrl } from '../types'\n\n/**\n * 去除图片链接中多余的参数\n * @param originalUrl\n */\nconst cleanParameter = (originalUrl: string) => {\n  let newUrl = originalUrl\n  // 去除#号\n  const indexPoundSign = originalUrl.indexOf('#')\n  if (indexPoundSign !== -1) {\n    newUrl = originalUrl.substring(0, indexPoundSign)\n  }\n  // 去除?号\n  const indexQuestionMark = originalUrl.indexOf('?')\n  if (indexQuestionMark !== -1) {\n    newUrl = originalUrl.substring(0, indexQuestionMark)\n  }\n  return newUrl\n}\n\n/**\n * 获取图片链接\n * @param content\n */\nexport const getUrlListFromContent = (content: string) => {\n  const markdownURLList = (content.match(/!\\[[^\\]]*\\]\\(([^)]+)\\)/g) || [])\n    .map((item: string) => {\n      const res = item.match(/\\!\\[.*\\]\\((.*?)( \".*\")?\\)/)\n      if (res) {\n        const url = res[1]\n        // 去除#?号\n        return {\n          original: url,\n          url: cleanParameter(url),\n        }\n      }\n      return undefined\n    })\n    .filter((item) => item) as ImageUrl[]\n  const imageTagURLList = (content.match(/<img.*?(?:>|\\/>)/gi) || [])\n    .map((item: string) => {\n      const res = item.match(/src=[\\'\\\"]?([^\\'\\\"]*)[\\'\\\"]?/i)\n      if (res) {\n        const url = res[1]\n        // 去除#?号\n        return {\n          original: url,\n          url: cleanParameter(url),\n        }\n      }\n      return undefined\n    })\n    .filter((item) => item) as ImageUrl[]\n  return markdownURLList.concat(imageTagURLList)\n}\n\n/**\n * 根据文件内容获取唯一文件名\n * @param imgBuffer\n */\nexport async function getFileName(imgBuffer: Buffer): Promise<string> {\n  return new Promise((resolve) => {\n    getEtag(imgBuffer, (hash: string) => {\n      resolve(hash)\n    })\n  })\n}\n\nexport { getFileTypeFromUrl, getFileTypeFromBuffer, getFileType }\n","import COS from 'cos-nodejs-sdk-v5'\nimport { CosConfig } from './types'\nimport { out } from '@elog/shared'\nimport { getSecretExt } from './utils'\n\n/**\n * 腾讯云COS\n */\nclass CosClient {\n  config: CosConfig\n  imgClient?: COS\n  constructor(config: CosConfig) {\n    this.config = config\n    // 尝试初始化COS实例\n    void this.initCos()\n  }\n\n  /**\n   * 初始化配置和COS实例\n   */\n  async initCos() {\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        secretId: this.config.secretId || process.env.COS_SECRET_ID!,\n        secretKey: this.config.secretKey || process.env.COS_SECRET_KEY!,\n      }\n    }\n    this.imgClient = new COS(this.config)\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回undefined\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.initCos()\n    }\n    try {\n      await this.imgClient!.headObject({\n        Bucket: this.config.bucket, // 存储桶名字（必须）\n        Region: this.config.region, // 存储桶所在地域，必须字段\n        Key: `${this.config.prefixKey}/${fileName}`, //  文件名  必须\n      })\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`\n      }\n      return `https://${this.config.bucket}.cos.${this.config.region}.myqcloud.com/${this.config.prefixKey}/${fileName}`\n    } catch (e: any) {\n      out.debug(`图床检查出错: ${e.message}`)\n    }\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.initCos()\n    }\n    try {\n      const res = await this.imgClient!.putObject({\n        Bucket: this.config.bucket, // 存储桶名字（必须）\n        Region: this.config.region, // 存储桶所在地域，必须字段\n        Key: `${this.config.prefixKey}/${fileName}`, //  文件名  必须\n        StorageClass: 'STANDARD', // 上传模式（标准模式）\n        Body: imgBuffer, // 上传文件对象\n      })\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`\n      }\n      return `https://${res.Location}`\n    } catch (e: any) {\n      out.warning('跳过上传', `上传图片失败，请检查: ${e.message}`)\n    }\n  }\n}\n\nexport default CosClient\n","import { out } from '@elog/shared'\nimport path from 'path'\n\ninterface SecretExt {\n  secretExt?: string\n}\n\nexport const getSecretExt = async <T>(config: T & SecretExt) => {\n  out.access('注意', '正在使用密钥拓展点，请遵循密钥拓展点注入规范')\n  try {\n    // 如果指定了secret拓展点，那么拓展点返回的账号密码信息，将会覆盖elog-config.json中的image信息\n    const secretExtPath = path.resolve(process.cwd(), config.secretExt!)\n    // 拓展点需要暴露getSecret方法\n    const { getSecret } = require(secretExtPath)\n    const ext = await getSecret()\n    config = { ...config, ...ext }\n    return config\n  } catch (e: any) {\n    out.err(e.message)\n    out.err('执行失败', '密钥拓展点执行失败，请检查！')\n    process.exit(1)\n  }\n}\n","// 阿里云图床\nimport OSS from 'ali-oss'\nimport { OssConfig } from './types'\nimport { out } from '@elog/shared'\nimport { getSecretExt } from './utils'\n\nclass OssClient {\n  config: OssConfig\n  imgClient?: OSS\n\n  constructor(config: OssConfig) {\n    this.config = config\n    // 尝试初始化OSS实例\n    void this.init()\n  }\n\n  /**\n   * 初始化配置和OSS实例\n   */\n  async init() {\n    // 处理prefixKey配置\n    if (this.config.prefixKey?.endsWith('/')) {\n      this.config.prefixKey = this.config.prefixKey.slice(0, -1)\n    }\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        secretId: this.config.secretId || process.env.OSS_SECRET_ID!,\n        secretKey: this.config.secretKey || process.env.OSS_SECRET_KEY!,\n      }\n    }\n    this.imgClient = new OSS(this.config)\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      await this.imgClient!.head(`${this.config.prefixKey}/${fileName}`)\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`\n      }\n      return `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${this.config.prefixKey}/${fileName}`\n    } catch (e: any) {\n      out.debug(`图床检查出错: ${e.message}`)\n    }\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      const res = await this.imgClient!.put(`${this.config.prefixKey}/${fileName}`, imgBuffer)\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`\n      }\n      return res!.url\n    } catch (e: any) {\n      out.warning('跳过上传', `上传图片失败，请检查: ${e.message}`)\n    }\n  }\n}\n\nexport default OssClient\n","import { getSecretExt } from './utils'\nconst upyun = require('upyun')\nimport { out } from '@elog/shared'\nimport { UPYunConfig } from './types'\n\n/**\n * 又拍云\n */\nclass UPClient {\n  config: UPYunConfig\n  imgClient?: any\n  constructor(config: UPYunConfig) {\n    this.config = config\n    // 尝试初始化实例\n    void this.init()\n  }\n\n  /**\n   * 初始化配置\n   */\n  async init() {\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        user: this.config.user || process.env.UPYUN_SECRET_ID!,\n        password: this.config.password || process.env.UPYUN_SECRET_KEY!,\n      }\n    }\n    // 域名\n    if (!this.config.host) {\n      out.access(`未指定域名host，将使用测试域名：http://${this.config.bucket}.test.upcdn.net`)\n      this.config.host = `http://${this.config.bucket}.test.upcdn.net`\n    }\n    this.imgClient = new upyun.Client(new upyun.Service(this.config))\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      const res = await this.imgClient.headFile(`${this.config.prefixKey}/${fileName}`)\n      if (res) {\n        return `${this.config.host}/${this.config.prefixKey}/${fileName}`\n      } else {\n        return undefined\n      }\n    } catch (e: any) {\n      out.debug(`上传图片失败，请检查: ${e.message}`)\n      return undefined\n    }\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      const res = await this.imgClient.putFile(`${this.config.prefixKey}/${fileName}`, imgBuffer)\n      if (res) {\n        return `${this.config.host}/${this.config.prefixKey}/${fileName}`\n      } else {\n        return undefined\n      }\n    } catch (e: any) {\n      out.debug(`上传图片失败，请检查: ${e.message}`)\n      return undefined\n    }\n  }\n}\n\nexport default UPClient\n","import { GithubConfig } from './types'\nimport { out, request, RequestOptions } from '@elog/shared'\nimport { getSecretExt } from './utils'\n\n// Github图床\nclass GithubClient {\n  config: GithubConfig\n  /** 是否初始化结束 */\n  isInit?: boolean\n\n  constructor(config: GithubConfig) {\n    this.config = config\n    // 尝试初始化Github配置\n    void this.init()\n  }\n\n  async init() {\n    if (!this.config.host) {\n      out.access('未指定加速域名，将使用默认域名：https://raw.githubusercontent.com')\n    } else if (this.config.host?.includes('cdn.jsdelivr.net')) {\n      // 如果指定了加速域名\n      this.config.host = 'https://cdn.jsdelivr.net'\n    }\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        token: this.config.token || process.env.GITHUB_TOKEN!,\n      }\n    }\n    this.isInit = true\n  }\n\n  async _fetch(\n    fileName: string,\n    options: RequestOptions,\n    base64File?: string,\n  ): Promise<string | undefined> {\n    if (!this.isInit) {\n      await this.init()\n    }\n    const path = `https://api.github.com/repos/${this.config.user}/${this.config.repo}/contents/${this.config.prefixKey}/${fileName}`\n    const data = base64File && {\n      message: 'Upload by elog',\n      branch: this.config.branch,\n      content: base64File,\n    }\n    const method = options.method\n    try {\n      const result = await request<any>(path, {\n        data,\n        headers: {\n          Authorization: `token ${this.config.token}`,\n        },\n        method,\n      })\n      if (result.status === 409) {\n        out.warning('图片上传失败', '由于github并发问题，图片上传失败')\n      } else if (result.status === 200 || result.status === 201) {\n        if (this.config.host) {\n          return `${this.config.host}/gh/${this.config.user}/${this.config.repo}/${this.config.prefixKey}/${fileName}`\n        } else if (method === 'GET') {\n          return result.data.download_url as string\n        } else {\n          return result.data.content.download_url as string\n        }\n      }\n    } catch (e) {\n      if (base64File) {\n        // @ts-ignore\n        out.warning('请求失败', e.message)\n      } else {\n        // @ts-ignore\n        out.warning('NOT FOUND', e.message)\n      }\n    }\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    return await this._fetch(fileName, { method: 'GET' })\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    const base64File = imgBuffer.toString('base64')\n    return await this._fetch(fileName, { method: 'PUT' }, base64File)\n  }\n}\n\nexport default GithubClient\n","// 七牛云图床\nimport * as qiniu from 'qiniu'\nimport { QiniuConfig } from './types'\nimport { out } from '@elog/shared'\nimport { getSecretExt } from './utils'\n\nclass QiNiuClient {\n  config: QiniuConfig\n  /** 是否初始化结束 */\n  isInit?: boolean\n  uploadToken?: string\n  bucketManager?: qiniu.rs.BucketManager\n  formUploader?: qiniu.form_up.FormUploader\n  putExtra?: qiniu.form_up.PutExtra\n\n  constructor(config: QiniuConfig) {\n    this.config = config\n    // 尝试初始化实例\n    void this.init()\n  }\n\n  /**\n   * 初始化配置\n   */\n  async init() {\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        secretId: this.config.secretId || process.env.QINIU_SECRET_ID!,\n        secretKey: this.config.secretKey || process.env.QINIU_SECRET_KEY!,\n      }\n    }\n    if (!this.config.host) {\n      out.err('使用七牛云时，需要指定域名host')\n      process.exit(-1)\n    }\n    const mac = new qiniu.auth.digest.Mac(this.config.secretId, this.config.secretKey)\n    const putPolicy = new qiniu.rs.PutPolicy({ scope: this.config.bucket }) // 配置\n    this.uploadToken = putPolicy.uploadToken(mac) // 获取上传凭证\n    // @ts-ignore\n    const qiniuConfig = new qiniu.conf.Config({ zone: this.config.region })\n    // 空间对应的机房\n    this.formUploader = new qiniu.form_up.FormUploader(qiniuConfig)\n    this.bucketManager = new qiniu.rs.BucketManager(mac, qiniuConfig)\n    this.putExtra = new qiniu.form_up.PutExtra()\n    this.isInit = true\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   *\n   * @param {string} fileName 文件名\n   * @return {Promise<string>} 图片url\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.isInit) {\n      await this.init()\n    }\n    return await new Promise<string | undefined>((resolve) => {\n      this.bucketManager?.stat(\n        this.config.bucket,\n        `${this.config.prefixKey}/${fileName}`,\n        (err, _respBody, respInfo) => {\n          if (err) {\n            out.debug(`检查图片信息时出错: ${err.message}`)\n            resolve(undefined)\n          } else {\n            if (respInfo.statusCode === 200) {\n              resolve(`${this.config.host}/${this.config.prefixKey}/${fileName}`)\n            } else {\n              out.debug('检查图片信息时出错')\n              out.debug(JSON.stringify(respInfo))\n              resolve(undefined)\n            }\n          }\n        },\n      )\n    })\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.isInit) {\n      await this.init()\n    }\n    return await new Promise<string | undefined>((resolve) => {\n      this.formUploader?.put(\n        this.uploadToken!,\n        `${this.config.prefixKey}/${fileName}`,\n        imgBuffer,\n        this.putExtra!,\n        (respErr, _respBody, respInfo) => {\n          if (respErr) {\n            out.debug(`上传图片失败: ${respErr.message}`)\n          } else if (respInfo.statusCode === 200) {\n            resolve(`${this.config.host}/${this.config.prefixKey}/${fileName}`)\n          } else {\n            out.debug('上传图片失败')\n            out.debug(JSON.stringify(respInfo))\n            resolve(undefined)\n          }\n        },\n      )\n    })\n  }\n}\n\nexport default QiNiuClient\n","import { ImgLocalConfig } from './types'\nimport * as fs from 'fs'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport { out } from '@elog/shared'\n\nclass CosClient {\n  config: ImgLocalConfig\n  constructor(config: ImgLocalConfig) {\n    this.config = config\n  }\n\n  /**\n   * 检查是否已经存在图片，存在则返回url,不存在返回undefined\n   * TODO 为了性能，本地也需要维护一个文件的缓存MAP，这样不会重复进行文件查找和写入\n   * TODO 当前阶段可以忽略检查本地文件是否存在，直接覆盖写入即可\n   */\n  async hasImage(): Promise<string | undefined> {\n    return undefined\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    try {\n      // 将文件写入本地\n      // 文件路径\n      const dirPath = path.resolve(process.cwd(), this.config.outputDir)\n      mkdirp.sync(dirPath)\n      const filePath = path.resolve(dirPath, fileName)\n      fs.writeFileSync(filePath, imgBuffer)\n      let prefixKey = this.config.prefixKey || '/'\n      if (!prefixKey.endsWith('/')) {\n        prefixKey = prefixKey + '/'\n      }\n      // 计算root和output的相对路径\n      return prefixKey + fileName\n    } catch (e) {\n      // @ts-ignore\n      out.err('写入错误', e.message)\n    }\n  }\n}\n\nexport default CosClient\n","import CosClient from './cos'\nimport OssClient from './oss'\nimport UPClient from './upyun'\nimport GithubClient from './github'\nimport QiniuClient from './qiniu'\nimport LocalClient from './local'\nimport { out } from '@elog/shared'\nimport {\n  CosConfig,\n  GithubConfig,\n  ImageConfig,\n  OssConfig,\n  QiniuConfig,\n  UPYunConfig,\n  ImgLocalConfig,\n} from './types'\nimport { imageBedList, ImagePlatformEnum } from './const'\n\nclass ImgBedClient {\n  config: ImageConfig\n  imageClient: any\n\n  constructor(config: ImageConfig) {\n    this.config = config\n    this.imageClient = this.getImageBedInstance(this.config.platform)\n  }\n\n  /**\n   * 获取图床对象的实例\n   *\n   * @param {string} platform 图床类型\n   * @return {any} 图床实例\n   */\n  getImageBedInstance(platform: ImagePlatformEnum) {\n    if (!imageBedList.includes(platform)) {\n      out.err('配置错误', `目前只支持${imageBedList.toString()}`)\n      process.exit(-1)\n    }\n    switch (platform) {\n      case ImagePlatformEnum.COS:\n        const cosConfig = this.config.cos as CosConfig\n        return new CosClient(cosConfig)\n      case ImagePlatformEnum.OSS:\n        const ossConfig = this.config.oss as OssConfig\n        return new OssClient(ossConfig)\n      case ImagePlatformEnum.QINIU:\n        const qiniuConfig = this.config.qiniu as QiniuConfig\n        return new QiniuClient(qiniuConfig)\n      case ImagePlatformEnum.UPYUN:\n        const upyunConfig = this.config.upyun as UPYunConfig\n        return new UPClient(upyunConfig)\n      case ImagePlatformEnum.GITHUB:\n        const githubConfig = this.config.github as GithubConfig\n        return new GithubClient(githubConfig)\n      default:\n        const defaultConfig = this.config.local as ImgLocalConfig\n        return new LocalClient(defaultConfig)\n    }\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    return await this.imageClient.hasImage(fileName)\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    return await this.imageClient.uploadImg(imgBuffer, fileName)\n  }\n}\n\nexport default ImgBedClient\n","export enum ImagePlatformEnum {\n  QINIU = 'qiniu',\n  UPYUN = 'upyun',\n  COS = 'cos',\n  GITHUB = 'github',\n  OSS = 'oss',\n  LOCAL = 'local',\n}\n\nexport const imageBedList = Object.values(ImagePlatformEnum)\n","import ImgClient from './client'\n\nexport default ImgClient\n","import { getFileName, getFileType, getUrlListFromContent } from './utils'\nimport ImgClient from './platform'\nimport { ImageConfig } from './platform/types'\nimport { out, request } from '@elog/shared'\nimport { DocDetail } from '@elog/types'\nimport { ImagePlatformEnum } from './platform/const'\nimport { ImageSource, ImageUrl } from './types'\nimport * as process from 'process'\n\nclass ImageUploader {\n  config: ImageConfig\n  ctx: ImgClient\n\n  constructor(config: ImageConfig) {\n    this.config = config\n    this.ctx = new ImgClient(config)\n  }\n\n  /**\n   * 获取图片buffer\n   */\n  async getPicBufferFromURL(url: string) {\n    try {\n      const res = await request<Buffer>(url, {\n        dataType: 'arraybuffer',\n        headers: {\n          // NOTE FlowUs图片下载有限制，需要referer为https://flowus.cn/\n          referer: process.env.REFERER_URL,\n        },\n      })\n      out.info('下载成功', url)\n      return res.data\n    } catch (e: any) {\n      out.warning('下载失败', `${url}，错误信息：${e.message}`)\n    }\n  }\n\n  /**\n   * 上传\n   * @param urlList\n   */\n  async upload(urlList: ImageUrl[]) {\n    const toUploadURLs = urlList.map(async (image) => {\n      return await new Promise<ImageSource | undefined>(async (resolve) => {\n        try {\n          const buffer = await this.getPicBufferFromURL(image.original)\n          if (!buffer) {\n            resolve(undefined)\n            return\n          }\n          // 生成文件名\n          const fileName = await getFileName(buffer)\n          // 生成文件名后缀\n          const fileType = getFileType(image.url, buffer)\n          // 获取文件名\n          const fullName = `${fileName}.${fileType.type}`\n          out.info('处理图片', `生成文件名: ${fullName}`)\n          // 检查图床是否存在该文件\n          let exist = await this.ctx.hasImage(fullName)\n          if (exist) {\n            out.info('忽略上传', exist)\n            // 图片已存在\n            resolve({\n              fileName: fullName,\n              original: image.original,\n              url: exist,\n              upload: false,\n            })\n          } else {\n            // 上传图片\n            resolve({\n              buffer,\n              fileName: fullName,\n              original: image.original,\n              upload: true,\n            })\n          }\n        } catch (err: any) {\n          resolve(undefined)\n        }\n      })\n    })\n    const toUploadImgs = (await Promise.all(toUploadURLs).then((imgs) =>\n      imgs.filter((img) => img !== undefined),\n    )) as ImageSource[]\n    let output: ImageUrl[] = []\n\n    for (const img of toUploadImgs) {\n      let newUrl: string | undefined = ''\n      if (img.upload) {\n        newUrl = await this.ctx.uploadImg(img.buffer!, img.fileName)\n        if (newUrl) {\n          if (this.config.platform === ImagePlatformEnum.LOCAL) {\n            out.info('生成图片', newUrl)\n          } else {\n            out.info('上传成功', newUrl)\n          }\n          output.push({ original: img.original, url: newUrl })\n        }\n      } else {\n        output.push({ original: img.original, url: img.url! })\n      }\n    }\n    if (output.length) {\n      output\n        .filter((item) => item.url && item.url !== item.original)\n        .map((item) => {\n          return {\n            original: item.original,\n            url: item.url,\n          }\n        })\n      return output\n    }\n  }\n\n  /**\n   * 替换图片\n   * @param articleList\n   */\n  async replaceImages(articleList: DocDetail[]) {\n    // 遍历文章列表\n    for (let i = 0; i < articleList.length; i++) {\n      const articleInfo = articleList[i]\n      // 获取图片URL列表\n      const urlList = getUrlListFromContent(articleInfo.body)\n      if (urlList.length) {\n        // 上传图片\n        const urls = await this.upload(urlList)\n        if (urls?.length) {\n          // 替换文章中的图片\n          urls.forEach((item) => {\n            out.info('图片替换', `${item.url}`)\n            articleInfo.body = articleInfo.body.replace(item.original, item.url)\n          })\n        }\n      }\n    }\n    return articleList\n  }\n}\n\nexport default ImageUploader\n","import ImageUploader from './core'\n\nexport * from './platform/types'\nexport * from './types'\n\nexport default ImageUploader\n"],"mappings":"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","names":["sha1","out","out","out","out","out","out","out","out","path","out","out","path","out","CosClient","path","out","out","ImagePlatformEnum","out","out","request","process","request","out"]}