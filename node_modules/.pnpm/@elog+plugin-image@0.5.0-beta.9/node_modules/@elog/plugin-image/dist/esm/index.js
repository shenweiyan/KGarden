var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/qetag.js
function getEtag(buffer, callback) {
  let mode = "buffer";
  if (typeof buffer === "string") {
    buffer = __require("fs").createReadStream(buffer);
    mode = "stream";
  } else if (buffer instanceof __require("stream")) {
    mode = "stream";
  }
  const sha1 = function(content) {
    const crypto = __require("crypto");
    const sha12 = crypto.createHash("sha1");
    sha12.update(content);
    return sha12.digest();
  };
  const blockSize = 4 * 1024 * 1024;
  const sha1String = [];
  let prefix = 22;
  let blockCount = 0;
  switch (mode) {
    case "buffer":
      const bufferSize = buffer.length;
      blockCount = Math.ceil(bufferSize / blockSize);
      for (let i = 0; i < blockCount; i++) {
        sha1String.push(sha1(buffer.slice(i * blockSize, (i + 1) * blockSize)));
      }
      process.nextTick(function() {
        callback(calcEtag());
      });
      break;
    case "stream":
      const stream = buffer;
      stream.on("readable", function() {
        let chunk;
        while (chunk = stream.read(blockSize)) {
          sha1String.push(sha1(chunk));
          blockCount++;
        }
      });
      stream.on("end", function() {
        callback(calcEtag());
      });
      break;
  }
  function calcEtag() {
    if (!sha1String.length) {
      return "Fto5o-5ea0sNMlW_75VgGJCv2AcJ";
    }
    let sha1Buffer = Buffer.concat(sha1String, blockCount * 20);
    if (blockCount > 1) {
      prefix = 150;
      sha1Buffer = sha1(sha1Buffer);
    }
    sha1Buffer = Buffer.concat([Buffer.from([prefix]), sha1Buffer], sha1Buffer.length + 1);
    return sha1Buffer.toString("base64").replace(/\//g, "_").replace(/\+/g, "-");
  }
}

// src/utils/url.ts
import imgSize from "image-size";
var getFileTypeFromUrl = (url) => {
  var _a;
  const reg = /[^/]+(?!.*\/)/g;
  const imgName = (_a = url.match(reg)) == null ? void 0 : _a.filter((item) => item).pop();
  let filename = "";
  let filetype = "";
  if (imgName) {
    filename = imgName.split(".")[0];
    filetype = imgName.split(".")[1].split("?")[0].split("#")[0];
    return {
      name: filename,
      type: filetype
    };
  }
};
var getFileTypeFromBuffer = (buffer) => {
  return imgSize(buffer).type;
};
var getFileType = (url, buffer) => {
  let file = getFileTypeFromUrl(url);
  if (!file) {
    file = {
      type: getFileTypeFromBuffer(buffer)
    };
  }
  return file;
};

// src/utils/index.ts
var cleanParameter = (originalUrl) => {
  let newUrl = originalUrl;
  const indexPoundSign = originalUrl.indexOf("#");
  if (indexPoundSign !== -1) {
    newUrl = originalUrl.substring(0, indexPoundSign);
  }
  const indexQuestionMark = originalUrl.indexOf("?");
  if (indexQuestionMark !== -1) {
    newUrl = originalUrl.substring(0, indexQuestionMark);
  }
  return newUrl;
};
var getUrlListFromContent = (content) => {
  const markdownURLList = (content.match(/!\[[^\]]*\]\(([^)]+)\)/g) || []).map((item) => {
    const res = item.match(/\!\[.*\]\((.*?)( ".*")?\)/);
    if (res) {
      const url = res[1];
      return {
        original: url,
        url: cleanParameter(url)
      };
    }
    return void 0;
  }).filter((item) => item);
  const imageTagURLList = (content.match(/<img.*?(?:>|\/>)/gi) || []).map((item) => {
    const res = item.match(/src=[\'\"]?([^\'\"]*)[\'\"]?/i);
    if (res) {
      const url = res[1];
      return {
        original: url,
        url: cleanParameter(url)
      };
    }
    return void 0;
  }).filter((item) => item);
  return markdownURLList.concat(imageTagURLList);
};
function getFileName(imgBuffer) {
  return __async(this, null, function* () {
    return new Promise((resolve) => {
      getEtag(imgBuffer, (hash) => {
        resolve(hash);
      });
    });
  });
}

// src/platform/cos.ts
import COS from "cos-nodejs-sdk-v5";
import { out as out2 } from "@elog/shared";

// src/platform/utils.ts
import { out } from "@elog/shared";
import path from "path";
var getSecretExt = (config) => __async(void 0, null, function* () {
  out.access("\u6CE8\u610F", "\u6B63\u5728\u4F7F\u7528\u5BC6\u94A5\u62D3\u5C55\u70B9\uFF0C\u8BF7\u9075\u5FAA\u5BC6\u94A5\u62D3\u5C55\u70B9\u6CE8\u5165\u89C4\u8303");
  try {
    const secretExtPath = path.resolve(process.cwd(), config.secretExt);
    const { getSecret } = __require(secretExtPath);
    const ext = yield getSecret();
    config = __spreadValues(__spreadValues({}, config), ext);
    return config;
  } catch (e) {
    out.err(e.message);
    out.err("\u6267\u884C\u5931\u8D25", "\u5BC6\u94A5\u62D3\u5C55\u70B9\u6267\u884C\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF01");
    process.exit(1);
  }
});

// src/platform/cos.ts
var CosClient = class {
  constructor(config) {
    this.config = config;
    void this.initCos();
  }
  /**
   * 初始化配置和COS实例
   */
  initCos() {
    return __async(this, null, function* () {
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          secretId: this.config.secretId || process.env.COS_SECRET_ID,
          secretKey: this.config.secretKey || process.env.COS_SECRET_KEY
        });
      }
      this.imgClient = new COS(this.config);
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回undefined
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.initCos();
      }
      try {
        yield this.imgClient.headObject({
          Bucket: this.config.bucket,
          // 存储桶名字（必须）
          Region: this.config.region,
          // 存储桶所在地域，必须字段
          Key: `${this.config.prefixKey}/${fileName}`
          //  文件名  必须
        });
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`;
        }
        return `https://${this.config.bucket}.cos.${this.config.region}.myqcloud.com/${this.config.prefixKey}/${fileName}`;
      } catch (e) {
        out2.debug(`\u56FE\u5E8A\u68C0\u67E5\u51FA\u9519: ${e.message}`);
      }
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.initCos();
      }
      try {
        const res = yield this.imgClient.putObject({
          Bucket: this.config.bucket,
          // 存储桶名字（必须）
          Region: this.config.region,
          // 存储桶所在地域，必须字段
          Key: `${this.config.prefixKey}/${fileName}`,
          //  文件名  必须
          StorageClass: "STANDARD",
          // 上传模式（标准模式）
          Body: imgBuffer
          // 上传文件对象
        });
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`;
        }
        return `https://${res.Location}`;
      } catch (e) {
        out2.warning("\u8DF3\u8FC7\u4E0A\u4F20", `\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
      }
    });
  }
};
var cos_default = CosClient;

// src/platform/oss.ts
import OSS from "ali-oss";
import { out as out3 } from "@elog/shared";
var OssClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  /**
   * 初始化配置和OSS实例
   */
  init() {
    return __async(this, null, function* () {
      var _a;
      if ((_a = this.config.prefixKey) == null ? void 0 : _a.endsWith("/")) {
        this.config.prefixKey = this.config.prefixKey.slice(0, -1);
      }
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          secretId: this.config.secretId || process.env.OSS_SECRET_ID,
          secretKey: this.config.secretKey || process.env.OSS_SECRET_KEY
        });
      }
      this.imgClient = new OSS(this.config);
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        yield this.imgClient.head(`${this.config.prefixKey}/${fileName}`);
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`;
        }
        return `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${this.config.prefixKey}/${fileName}`;
      } catch (e) {
        out3.debug(`\u56FE\u5E8A\u68C0\u67E5\u51FA\u9519: ${e.message}`);
      }
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        const res = yield this.imgClient.put(`${this.config.prefixKey}/${fileName}`, imgBuffer);
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}/${fileName}`;
        }
        return res.url;
      } catch (e) {
        out3.warning("\u8DF3\u8FC7\u4E0A\u4F20", `\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
      }
    });
  }
};
var oss_default = OssClient;

// src/platform/upyun.ts
import { out as out4 } from "@elog/shared";
var upyun = __require("upyun");
var UPClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  /**
   * 初始化配置
   */
  init() {
    return __async(this, null, function* () {
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          user: this.config.user || process.env.UPYUN_SECRET_ID,
          password: this.config.password || process.env.UPYUN_SECRET_KEY
        });
      }
      if (!this.config.host) {
        out4.access(`\u672A\u6307\u5B9A\u57DF\u540Dhost\uFF0C\u5C06\u4F7F\u7528\u6D4B\u8BD5\u57DF\u540D\uFF1Ahttp://${this.config.bucket}.test.upcdn.net`);
        this.config.host = `http://${this.config.bucket}.test.upcdn.net`;
      }
      this.imgClient = new upyun.Client(new upyun.Service(this.config));
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        const res = yield this.imgClient.headFile(`${this.config.prefixKey}/${fileName}`);
        if (res) {
          return `${this.config.host}/${this.config.prefixKey}/${fileName}`;
        } else {
          return void 0;
        }
      } catch (e) {
        out4.debug(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
        return void 0;
      }
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        const res = yield this.imgClient.putFile(`${this.config.prefixKey}/${fileName}`, imgBuffer);
        if (res) {
          return `${this.config.host}/${this.config.prefixKey}/${fileName}`;
        } else {
          return void 0;
        }
      } catch (e) {
        out4.debug(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
        return void 0;
      }
    });
  }
};
var upyun_default = UPClient;

// src/platform/github.ts
import { out as out5, request } from "@elog/shared";
var GithubClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  init() {
    return __async(this, null, function* () {
      var _a;
      if (!this.config.host) {
        out5.access("\u672A\u6307\u5B9A\u52A0\u901F\u57DF\u540D\uFF0C\u5C06\u4F7F\u7528\u9ED8\u8BA4\u57DF\u540D\uFF1Ahttps://raw.githubusercontent.com");
      } else if ((_a = this.config.host) == null ? void 0 : _a.includes("cdn.jsdelivr.net")) {
        this.config.host = "https://cdn.jsdelivr.net";
      }
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          token: this.config.token || process.env.GITHUB_TOKEN
        });
      }
      this.isInit = true;
    });
  }
  _fetch(fileName, options, base64File) {
    return __async(this, null, function* () {
      if (!this.isInit) {
        yield this.init();
      }
      const path3 = `https://api.github.com/repos/${this.config.user}/${this.config.repo}/contents/${this.config.prefixKey}/${fileName}`;
      const data = base64File && {
        message: "Upload by elog",
        branch: this.config.branch,
        content: base64File
      };
      const method = options.method;
      try {
        const result = yield request(path3, {
          data,
          headers: {
            Authorization: `token ${this.config.token}`
          },
          method
        });
        if (result.status === 409) {
          out5.warning("\u56FE\u7247\u4E0A\u4F20\u5931\u8D25", "\u7531\u4E8Egithub\u5E76\u53D1\u95EE\u9898\uFF0C\u56FE\u7247\u4E0A\u4F20\u5931\u8D25");
        } else if (result.status === 200 || result.status === 201) {
          if (this.config.host) {
            return `${this.config.host}/gh/${this.config.user}/${this.config.repo}/${this.config.prefixKey}/${fileName}`;
          } else if (method === "GET") {
            return result.data.download_url;
          } else {
            return result.data.content.download_url;
          }
        }
      } catch (e) {
        if (base64File) {
          out5.warning("\u8BF7\u6C42\u5931\u8D25", e.message);
        } else {
          out5.warning("NOT FOUND", e.message);
        }
      }
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      return yield this._fetch(fileName, { method: "GET" });
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      const base64File = imgBuffer.toString("base64");
      return yield this._fetch(fileName, { method: "PUT" }, base64File);
    });
  }
};
var github_default = GithubClient;

// src/platform/qiniu.ts
import * as qiniu from "qiniu";
import { out as out6 } from "@elog/shared";
var QiNiuClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  /**
   * 初始化配置
   */
  init() {
    return __async(this, null, function* () {
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          secretId: this.config.secretId || process.env.QINIU_SECRET_ID,
          secretKey: this.config.secretKey || process.env.QINIU_SECRET_KEY
        });
      }
      if (!this.config.host) {
        out6.err("\u4F7F\u7528\u4E03\u725B\u4E91\u65F6\uFF0C\u9700\u8981\u6307\u5B9A\u57DF\u540Dhost");
        process.exit(-1);
      }
      const mac = new qiniu.auth.digest.Mac(this.config.secretId, this.config.secretKey);
      const putPolicy = new qiniu.rs.PutPolicy({ scope: this.config.bucket });
      this.uploadToken = putPolicy.uploadToken(mac);
      const qiniuConfig = new qiniu.conf.Config({ zone: this.config.region });
      this.formUploader = new qiniu.form_up.FormUploader(qiniuConfig);
      this.bucketManager = new qiniu.rs.BucketManager(mac, qiniuConfig);
      this.putExtra = new qiniu.form_up.PutExtra();
      this.isInit = true;
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   *
   * @param {string} fileName 文件名
   * @return {Promise<string>} 图片url
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.isInit) {
        yield this.init();
      }
      return yield new Promise((resolve) => {
        var _a;
        (_a = this.bucketManager) == null ? void 0 : _a.stat(
          this.config.bucket,
          `${this.config.prefixKey}/${fileName}`,
          (err, _respBody, respInfo) => {
            if (err) {
              out6.debug(`\u68C0\u67E5\u56FE\u7247\u4FE1\u606F\u65F6\u51FA\u9519: ${err.message}`);
              resolve(void 0);
            } else {
              if (respInfo.statusCode === 200) {
                resolve(`${this.config.host}/${this.config.prefixKey}/${fileName}`);
              } else {
                out6.debug("\u68C0\u67E5\u56FE\u7247\u4FE1\u606F\u65F6\u51FA\u9519");
                out6.debug(JSON.stringify(respInfo));
                resolve(void 0);
              }
            }
          }
        );
      });
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.isInit) {
        yield this.init();
      }
      return yield new Promise((resolve) => {
        var _a;
        (_a = this.formUploader) == null ? void 0 : _a.put(
          this.uploadToken,
          `${this.config.prefixKey}/${fileName}`,
          imgBuffer,
          this.putExtra,
          (respErr, _respBody, respInfo) => {
            if (respErr) {
              out6.debug(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${respErr.message}`);
            } else if (respInfo.statusCode === 200) {
              resolve(`${this.config.host}/${this.config.prefixKey}/${fileName}`);
            } else {
              out6.debug("\u4E0A\u4F20\u56FE\u7247\u5931\u8D25");
              out6.debug(JSON.stringify(respInfo));
              resolve(void 0);
            }
          }
        );
      });
    });
  }
};
var qiniu_default = QiNiuClient;

// src/platform/local.ts
import * as fs from "fs";
import path2 from "path";
import mkdirp from "mkdirp";
import { out as out7 } from "@elog/shared";
var CosClient2 = class {
  constructor(config) {
    this.config = config;
  }
  /**
   * 检查是否已经存在图片，存在则返回url,不存在返回undefined
   * TODO 为了性能，本地也需要维护一个文件的缓存MAP，这样不会重复进行文件查找和写入
   * TODO 当前阶段可以忽略检查本地文件是否存在，直接覆盖写入即可
   */
  hasImage() {
    return __async(this, null, function* () {
      return void 0;
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      try {
        const dirPath = path2.resolve(process.cwd(), this.config.outputDir);
        mkdirp.sync(dirPath);
        const filePath = path2.resolve(dirPath, fileName);
        fs.writeFileSync(filePath, imgBuffer);
        let prefixKey = this.config.prefixKey || "/";
        if (!prefixKey.endsWith("/")) {
          prefixKey = prefixKey + "/";
        }
        return prefixKey + fileName;
      } catch (e) {
        out7.err("\u5199\u5165\u9519\u8BEF", e.message);
      }
    });
  }
};
var local_default = CosClient2;

// src/platform/client.ts
import { out as out8 } from "@elog/shared";

// src/platform/const.ts
var ImagePlatformEnum = /* @__PURE__ */ ((ImagePlatformEnum2) => {
  ImagePlatformEnum2["QINIU"] = "qiniu";
  ImagePlatformEnum2["UPYUN"] = "upyun";
  ImagePlatformEnum2["COS"] = "cos";
  ImagePlatformEnum2["GITHUB"] = "github";
  ImagePlatformEnum2["OSS"] = "oss";
  ImagePlatformEnum2["LOCAL"] = "local";
  return ImagePlatformEnum2;
})(ImagePlatformEnum || {});
var imageBedList = Object.values(ImagePlatformEnum);

// src/platform/client.ts
var ImgBedClient = class {
  constructor(config) {
    this.config = config;
    this.imageClient = this.getImageBedInstance(this.config.platform);
  }
  /**
   * 获取图床对象的实例
   *
   * @param {string} platform 图床类型
   * @return {any} 图床实例
   */
  getImageBedInstance(platform) {
    if (!imageBedList.includes(platform)) {
      out8.err("\u914D\u7F6E\u9519\u8BEF", `\u76EE\u524D\u53EA\u652F\u6301${imageBedList.toString()}`);
      process.exit(-1);
    }
    switch (platform) {
      case "cos" /* COS */:
        const cosConfig = this.config.cos;
        return new cos_default(cosConfig);
      case "oss" /* OSS */:
        const ossConfig = this.config.oss;
        return new oss_default(ossConfig);
      case "qiniu" /* QINIU */:
        const qiniuConfig = this.config.qiniu;
        return new qiniu_default(qiniuConfig);
      case "upyun" /* UPYUN */:
        const upyunConfig = this.config.upyun;
        return new upyun_default(upyunConfig);
      case "github" /* GITHUB */:
        const githubConfig = this.config.github;
        return new github_default(githubConfig);
      default:
        const defaultConfig = this.config.local;
        return new local_default(defaultConfig);
    }
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      return yield this.imageClient.hasImage(fileName);
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      return yield this.imageClient.uploadImg(imgBuffer, fileName);
    });
  }
};
var client_default = ImgBedClient;

// src/platform/index.ts
var platform_default = client_default;

// src/core.ts
import { out as out9, request as request2 } from "@elog/shared";
import * as process2 from "process";
var ImageUploader = class {
  constructor(config) {
    this.config = config;
    this.ctx = new platform_default(config);
  }
  /**
   * 获取图片buffer
   */
  getPicBufferFromURL(url) {
    return __async(this, null, function* () {
      try {
        const res = yield request2(url, {
          dataType: "arraybuffer",
          headers: {
            // NOTE FlowUs图片下载有限制，需要referer为https://flowus.cn/
            referer: process2.env.REFERER_URL
          }
        });
        out9.info("\u4E0B\u8F7D\u6210\u529F", url);
        return res.data;
      } catch (e) {
        out9.warning("\u4E0B\u8F7D\u5931\u8D25", `${url}\uFF0C\u9519\u8BEF\u4FE1\u606F\uFF1A${e.message}`);
      }
    });
  }
  /**
   * 上传
   * @param urlList
   */
  upload(urlList) {
    return __async(this, null, function* () {
      const toUploadURLs = urlList.map((image) => __async(this, null, function* () {
        return yield new Promise((resolve) => __async(this, null, function* () {
          try {
            const buffer = yield this.getPicBufferFromURL(image.original);
            if (!buffer) {
              resolve(void 0);
              return;
            }
            const fileName = yield getFileName(buffer);
            const fileType = getFileType(image.url, buffer);
            const fullName = `${fileName}.${fileType.type}`;
            out9.info("\u5904\u7406\u56FE\u7247", `\u751F\u6210\u6587\u4EF6\u540D: ${fullName}`);
            let exist = yield this.ctx.hasImage(fullName);
            if (exist) {
              out9.info("\u5FFD\u7565\u4E0A\u4F20", exist);
              resolve({
                fileName: fullName,
                original: image.original,
                url: exist,
                upload: false
              });
            } else {
              resolve({
                buffer,
                fileName: fullName,
                original: image.original,
                upload: true
              });
            }
          } catch (err) {
            resolve(void 0);
          }
        }));
      }));
      const toUploadImgs = yield Promise.all(toUploadURLs).then(
        (imgs) => imgs.filter((img) => img !== void 0)
      );
      let output = [];
      for (const img of toUploadImgs) {
        let newUrl = "";
        if (img.upload) {
          newUrl = yield this.ctx.uploadImg(img.buffer, img.fileName);
          if (newUrl) {
            if (this.config.platform === "local" /* LOCAL */) {
              out9.info("\u751F\u6210\u56FE\u7247", newUrl);
            } else {
              out9.info("\u4E0A\u4F20\u6210\u529F", newUrl);
            }
            output.push({ original: img.original, url: newUrl });
          }
        } else {
          output.push({ original: img.original, url: img.url });
        }
      }
      if (output.length) {
        output.filter((item) => item.url && item.url !== item.original).map((item) => {
          return {
            original: item.original,
            url: item.url
          };
        });
        return output;
      }
    });
  }
  /**
   * 替换图片
   * @param articleList
   */
  replaceImages(articleList) {
    return __async(this, null, function* () {
      for (let i = 0; i < articleList.length; i++) {
        const articleInfo = articleList[i];
        const urlList = getUrlListFromContent(articleInfo.body);
        if (urlList.length) {
          const urls = yield this.upload(urlList);
          if (urls == null ? void 0 : urls.length) {
            urls.forEach((item) => {
              out9.info("\u56FE\u7247\u66FF\u6362", `${item.url}`);
              articleInfo.body = articleInfo.body.replace(item.original, item.url);
            });
          }
        }
      }
      return articleList;
    });
  }
};
var core_default = ImageUploader;

// src/index.ts
var src_default = core_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map