import COS, { COSOptions } from 'cos-nodejs-sdk-v5';
import OSS, { Options } from 'ali-oss';
import { RequestOptions } from '@elog/shared';
import * as qiniu from 'qiniu';
import { DocDetail } from '@elog/types';

declare enum ImagePlatformEnum {
    QINIU = "qiniu",
    UPYUN = "upyun",
    COS = "cos",
    GITHUB = "github",
    OSS = "oss",
    LOCAL = "local"
}

interface ImgBaseConfig {
    host?: string;
    prefixKey?: string;
    secretExt?: string;
}
interface ICosConfig extends ImgBaseConfig {
    secretId: string;
    secretKey: string;
    bucket: string;
    region: string;
}
type CosConfig = ICosConfig & COSOptions;
interface IOssConfig extends ImgBaseConfig {
    secretId: string;
    secretKey: string;
    bucket: string;
    region: string;
    stsToken?: string;
    secure?: boolean;
    endpoint?: string;
}
type OssConfig = IOssConfig & Options;
interface QiniuConfig extends ImgBaseConfig {
    secretId: string;
    secretKey: string;
    bucket: string;
    region: string;
}
interface UPYunConfig extends ImgBaseConfig {
    bucket: string;
    user: string;
    password: string;
}
interface GithubConfig extends ImgBaseConfig {
    user: string;
    token: string;
    repo: string;
    branch?: string;
}
interface ImgLocalConfig {
    outputDir: string;
    prefixKey: string;
}
/**
 * 图床配置
 */
type ImagePlatformConfig = {
    [key in ImagePlatformEnum]: any;
};
type ImageConfig = {
    enable: boolean;
    platform: ImagePlatformEnum;
} & ImagePlatformConfig;

/**
 * 腾讯云COS
 */
declare class CosClient$1 {
    config: CosConfig;
    imgClient?: COS;
    constructor(config: CosConfig);
    /**
     * 初始化配置和COS实例
     */
    initCos(): Promise<void>;
    /**
     * 检查图床是否已经存在图片，存在则返回url,不存在返回undefined
     * @param fileName
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

declare class OssClient {
    config: OssConfig;
    imgClient?: OSS;
    constructor(config: OssConfig);
    /**
     * 初始化配置和OSS实例
     */
    init(): Promise<void>;
    /**
     * 检查图床是否已经存在图片，存在则返回url,不存在返回空
     * @param fileName
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

/**
 * 又拍云
 */
declare class UPClient {
    config: UPYunConfig;
    imgClient?: any;
    constructor(config: UPYunConfig);
    /**
     * 初始化配置
     */
    init(): Promise<void>;
    /**
     * 检查图床是否已经存在图片，存在则返回url,不存在返回空
     * @param fileName
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

declare class GithubClient {
    config: GithubConfig;
    /** 是否初始化结束 */
    isInit?: boolean;
    constructor(config: GithubConfig);
    init(): Promise<void>;
    _fetch(fileName: string, options: RequestOptions, base64File?: string): Promise<string | undefined>;
    /**
     * 检查图床是否已经存在图片，存在则返回url,不存在返回空
     * @param fileName
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

declare class QiNiuClient {
    config: QiniuConfig;
    /** 是否初始化结束 */
    isInit?: boolean;
    uploadToken?: string;
    bucketManager?: qiniu.rs.BucketManager;
    formUploader?: qiniu.form_up.FormUploader;
    putExtra?: qiniu.form_up.PutExtra;
    constructor(config: QiniuConfig);
    /**
     * 初始化配置
     */
    init(): Promise<void>;
    /**
     * 检查图床是否已经存在图片，存在则返回url,不存在返回空
     *
     * @param {string} fileName 文件名
     * @return {Promise<string>} 图片url
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

declare class CosClient {
    config: ImgLocalConfig;
    constructor(config: ImgLocalConfig);
    /**
     * 检查是否已经存在图片，存在则返回url,不存在返回undefined
     * TODO 为了性能，本地也需要维护一个文件的缓存MAP，这样不会重复进行文件查找和写入
     * TODO 当前阶段可以忽略检查本地文件是否存在，直接覆盖写入即可
     */
    hasImage(): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

declare class ImgBedClient {
    config: ImageConfig;
    imageClient: any;
    constructor(config: ImageConfig);
    /**
     * 获取图床对象的实例
     *
     * @param {string} platform 图床类型
     * @return {any} 图床实例
     */
    getImageBedInstance(platform: ImagePlatformEnum): CosClient$1 | OssClient | UPClient | GithubClient | QiNiuClient | CosClient;
    /**
     * 检查图床是否已经存在图片，存在则返回url
     * @param fileName
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     */
    uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined>;
}

interface ImageUrl {
    url: string;
    original: string;
}
interface ImageSource {
    fileName: string;
    original: string;
    url?: string;
    upload: boolean;
    buffer?: Buffer;
}

declare class ImageUploader {
    config: ImageConfig;
    ctx: ImgBedClient;
    constructor(config: ImageConfig);
    /**
     * 获取图片buffer
     */
    getPicBufferFromURL(url: string): Promise<Buffer | undefined>;
    /**
     * 上传
     * @param urlList
     */
    upload(urlList: ImageUrl[]): Promise<ImageUrl[] | undefined>;
    /**
     * 替换图片
     * @param articleList
     */
    replaceImages(articleList: DocDetail[]): Promise<DocDetail[]>;
}

export { CosConfig, GithubConfig, ICosConfig, IOssConfig, ImageConfig, ImageSource, ImageUrl, ImgLocalConfig, OssConfig, QiniuConfig, UPYunConfig, ImageUploader as default };
