"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
var _tinyasyncpool = require('tiny-async-pool'); var _tinyasyncpool2 = _interopRequireDefault(_tinyasyncpool);
var _shared = require('@elog/shared');

// src/utils.ts
var _frontmatter = require('front-matter'); var _frontmatter2 = _interopRequireDefault(_frontmatter);
var _moment = require('moment'); var _moment2 = _interopRequireDefault(_moment);
var _unified = require('unified'); var _unified2 = _interopRequireDefault(_unified);
var _rehypeparse = require('rehype-parse'); var _rehypeparse2 = _interopRequireDefault(_rehypeparse);
var _rehypestringify = require('rehype-stringify'); var _rehypestringify2 = _interopRequireDefault(_rehypestringify);

var getProps = (page) => {
  let { body } = page;
  let properties = {
    // 注入title
    title: page.title,
    // urlname
    urlname: page.slug,
    // 作者
    author: page.book.user.name,
    // 创建时间
    date: formatDate(page.created_at),
    // 更新时间
    updated: formatDate(page.updated_at)
  };
  try {
    const regex = /^---[\s|\S]+?---/i;
    body = body.replace(regex, (a) => a.replace(/(<br \/>|<br>|<br\/>)/gi, "\n"));
    const result = _frontmatter2.default.call(void 0, body);
    body = result.body;
    let attributes = result.attributes;
    properties = __spreadValues(__spreadValues({}, properties), attributes);
    return {
      body,
      properties
    };
  } catch (e) {
    _shared.out.warning(e.message);
    _shared.out.warning("front-matter\u89E3\u6790\u5931\u8D25\uFF0C\u5C06\u8FD4\u56DE\u9884\u5B9A\u4E49\u5C5E\u6027");
    _shared.out.warning("\u9884\u5B9A\u4E49\u5C5E\u6027\uFF1Ahttps://elog.1874.cool/notion/raqyleng501h23p1#\u9884\u5B9A\u4E49\u5C5E\u6027");
    return {
      body,
      properties
    };
  }
};
function formatDate(date) {
  return _moment2.default.call(void 0, date).format("YYYY-MM-DD HH:mm:ss");
}
function processMarkdownRaw(raw) {
  const nul = /\x00/g;
  const nul1 = /\u0000/g;
  const emptyAnchor = /<a name=\".*?\"><\/a>/g;
  const hiddenContent = /<div style="display:none">[\s\S]*?<\/div>/gi;
  raw = raw.replace(nul, "").replace(nul1, "").replace(hiddenContent, "").replace(emptyAnchor, "");
  return raw;
}
function processWordWrap(doc) {
  let { body: raw } = doc;
  const multiBr = /(<br>[\s\n]){2}/gi;
  const multiBrEnd = /(<br \/>[\n]?){2}/gi;
  const brBug = /<br \/>/g;
  raw = raw.replace(multiBr, "<br>").replace(multiBrEnd, "<br />\n").replace(brBug, "\n");
  return raw;
}
function noProcess(doc) {
  let { body: raw } = doc;
  return raw;
}
var cssStyle = [
  {
    type: "element",
    tagName: "link",
    properties: {
      rel: ["stylesheet"],
      href: "http://editor.yuque.com/ne-editor/lake-content-v1.css"
    },
    children: []
  },
  {
    type: "text",
    value: "\n    "
  }
];
var findHead = (node) => {
  if (node.type === "element" && node.tagName === "head") {
    node.children.push(...cssStyle);
  }
  if (node.children) {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      findHead(child);
    }
  }
};
var processHtml = (content) => {
  const processValue = _unified2.default.call(void 0, ).use(_rehypeparse2.default).use(() => (tree) => {
    findHead(tree);
  }).use(_rehypestringify2.default).processSync(content);
  return processValue.contents;
};
var processHtmlRaw = (html) => {
  try {
    return processHtml(html);
  } catch (e) {
    _shared.out.warning("HTML\u89E3\u6790\u5931\u8D25\uFF0C\u5C06\u8FD4\u56DE\u539F\u59CBHTML");
    return html;
  }
};

// src/format-ext.ts

var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var FormatExt = class {
  constructor(config) {
    this.formatExt = true;
    this.formatExt = config;
    this.ctx = this.initFormatExt();
  }
  /**
   * 初始化适配器
   * @private
   */
  initFormatExt() {
    if (typeof this.formatExt === "boolean") {
      if (this.formatExt) {
        return processWordWrap;
      } else {
        return noProcess;
      }
    } else if (typeof this.formatExt === "string") {
      _shared.out.warning("\u6CE8\u610F", "\u6B63\u5728\u52A0\u8F7D\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\uFF0C\u8BF7\u9075\u5FAA\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u6CE8\u5165\u89C4\u8303");
      try {
        const formatExtPath = _path2.default.resolve(process.cwd(), this.formatExt);
        const { format } = __require(formatExtPath);
        return format;
      } catch (e) {
        _shared.out.err(e.message);
        _shared.out.err("\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u52A0\u8F7D\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF01");
        process.exit(1);
      }
    } else if (typeof this.formatExt === "function") {
      return this.formatExt;
    } else {
      _shared.out.warning("\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u914D\u7F6E\u9519\u8BEF\uFF0C\u5C06\u4F7F\u7528\u9ED8\u8BA4\u903B\u8F91");
      return processWordWrap;
    }
  }
  /**
   * 获取文档处理器
   */
  getFormatExt() {
    return this.ctx;
  }
};

// src/client.ts
var DEFAULT_API_URL = "https://www.yuque.com/api/v2";
var YuqueClient = class {
  constructor(config) {
    this.catalog = [];
    this.config = config;
    this.config.token = config.token || process.env.YUQUE_TOKEN;
    if (!this.config.token) {
      _shared.out.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11\u8BED\u96C0Token");
      process.exit(-1);
    }
    this.namespace = `${config.login}/${config.repo}`;
    if (config.formatExt) {
      const formatExt = new FormatExt(config.formatExt);
      this.formatExtCtx = formatExt.getFormatExt();
    } else {
      this.formatExtCtx = processWordWrap;
    }
  }
  /**
   * send api request to yuque
   * @param api
   * @param reqOpts
   */
  request(api, reqOpts) {
    return __async(this, null, function* () {
      const { token } = this.config;
      let baseUrl = this.config.baseUrl || DEFAULT_API_URL;
      if (baseUrl.endsWith("/")) {
        baseUrl = baseUrl.slice(0, -1);
      }
      const url = `${baseUrl}/${api}`;
      const opts = __spreadValues({
        headers: {
          "X-Auth-Token": token
        }
      }, reqOpts);
      const res = yield _shared.request.call(void 0, url, opts);
      if (res.status !== 200) {
        _shared.out.warning(JSON.stringify(res));
      }
      return res.data.data;
    });
  }
  /**
   * 获取目录
   */
  getToc() {
    return __async(this, null, function* () {
      return this.request(`repos/${this.namespace}/toc`, {
        method: "GET"
      });
    });
  }
  /**
   * 获取文章列表(不带详情)
   */
  getDocList() {
    return __async(this, null, function* () {
      return this.request(`repos/${this.namespace}/docs`, {
        method: "GET"
      });
    });
  }
  /**
   * 获取文章详情
   */
  getDocDetail(slug) {
    return __async(this, null, function* () {
      const yuqueDoc = yield this.request(`repos/${this.namespace}/docs/${slug}`, {
        method: "GET",
        data: { raw: 1 }
      });
      const docInfo = yuqueDoc;
      docInfo.doc_id = yuqueDoc.slug;
      const find = this.catalog.find((item) => item.slug === yuqueDoc.slug);
      if (find) {
        let catalogPath = [];
        let parentId = find.parent_uuid;
        for (let i = 0; i < find.depth - 1; i++) {
          const current = this.catalog.find((item) => item.uuid === parentId);
          parentId = current.parent_uuid;
          const catalog = {
            title: current.title,
            doc_id: yuqueDoc.slug
          };
          catalogPath.push(catalog);
        }
        docInfo.catalog = catalogPath.reverse();
      }
      docInfo.body_html = processHtmlRaw(docInfo.body_html);
      return docInfo;
    });
  }
  /**
   * 获取文章详情列表
   * @param cachedDocs
   * @param ids
   */
  getDocDetailList(cachedDocs, ids) {
    return __async(this, null, function* () {
      this.catalog = yield this.getToc();
      let articleList = [];
      let docs = cachedDocs;
      if (ids.length) {
        docs = docs.filter((doc) => {
          const exist = ids.indexOf(doc.slug) > -1;
          if (!exist) {
            _shared.out.info("\u8DF3\u8FC7\u4E0B\u8F7D", doc.title);
          }
          return exist;
        });
      }
      if (!(docs == null ? void 0 : docs.length)) {
        _shared.out.access("\u8DF3\u8FC7", "\u6CA1\u6709\u9700\u8981\u4E0B\u8F7D\u7684\u6587\u7AE0");
        return articleList;
      }
      _shared.out.info("\u5F85\u4E0B\u8F7D\u6570", String(docs.length));
      _shared.out.info("\u5F00\u59CB\u4E0B\u8F7D\u6587\u6863...");
      docs = docs.map((item, index) => __spreadProps(__spreadValues({}, item), { _index: index + 1 }));
      const promise = (doc) => __async(this, null, function* () {
        _shared.out.info(`\u4E0B\u8F7D\u6587\u6863 ${doc._index}/${docs.length}   `, doc.title);
        let article = yield this.getDocDetail(doc.slug);
        article.body_original = article.body;
        const { body, properties } = getProps(article);
        let newBody = processMarkdownRaw(body);
        newBody = this.formatExtCtx(__spreadProps(__spreadValues({}, article), { body: newBody }));
        article.properties = properties;
        article.body = newBody;
        article.updated = new Date(article.updated_at).getTime();
        articleList.push(article);
      });
      yield _tinyasyncpool2.default.call(void 0, 5, docs, promise);
      _shared.out.info("\u5DF2\u4E0B\u8F7D\u6570", String(articleList.length));
      return articleList;
    });
  }
};
var client_default = YuqueClient;

// src/core.ts

var Yuque = class {
  constructor(options) {
    this.pages = [];
    this.config = options;
    this.ctx = new client_default(this.config);
  }
  /**
   * list docs of a repo
   * @return {Promise<DocDetail[]>} return docs
   */
  getDocList() {
    return __async(this, null, function* () {
      _shared.out.info("\u6B63\u5728\u83B7\u53D6\u6587\u6863\u5217\u8868\uFF0C\u8BF7\u7A0D\u7B49...");
      let pages = yield this.ctx.getDocList();
      pages = pages.filter((page) => {
        return this.config.onlyPublic ? !!page.public : true;
      }).filter((page) => {
        return this.config.onlyPublished ? !!page.status : true;
      });
      this.pages = pages;
      _shared.out.info("\u6587\u6863\u603B\u6570", String(this.pages.length));
      return pages.map((page) => {
        const timestamp = new Date(page.updated_at).getTime();
        return {
          // 暂时只需要返回这些属性
          id: String(page.id),
          doc_id: page.slug,
          updated: timestamp
        };
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param ids 需要下载的doc_id列表
   */
  getDocDetailList(ids) {
    return __async(this, null, function* () {
      return yield this.ctx.getDocDetailList(this.pages, ids);
    });
  }
};
var core_default = Yuque;

// src/index.ts
var src_default = core_default;


exports.default = src_default;
//# sourceMappingURL=index.js.map