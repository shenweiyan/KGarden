{"version":3,"sources":["../src/client.ts","../src/utils.ts","../src/format-ext.ts","../src/core.ts","../src/index.ts"],"names":["out"],"mappings":"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","sourcesContent":["import asyncPool from 'tiny-async-pool'\nimport { out, request, RequestOptions } from '@elog/shared'\nimport { getProps, processHtmlRaw, processMarkdownRaw, processWordWrap } from './utils'\nimport {\n  YuqueConfig,\n  YuQueResponse,\n  DocUnite,\n  YuqueDoc,\n  YuqueDocDetail,\n  YuqueDocProperties,\n  FormatExtFunction,\n} from './types'\nimport { DocDetail, YuqueCatalog, DocCatalog } from '@elog/types'\nimport { FormatExt } from './format-ext'\n\n/** 默认语雀API 路径 */\nconst DEFAULT_API_URL = 'https://www.yuque.com/api/v2'\n\nclass YuqueClient {\n  config: YuqueConfig\n  namespace: string\n  catalog: YuqueCatalog[] = []\n  formatExtCtx: FormatExtFunction\n\n  constructor(config: YuqueConfig) {\n    this.config = config\n    this.config.token = config.token || process.env.YUQUE_TOKEN!\n    if (!this.config.token) {\n      out.err('缺少参数', '缺少语雀Token')\n      process.exit(-1)\n    }\n    this.namespace = `${config.login}/${config.repo}`\n    if (config.formatExt) {\n      const formatExt = new FormatExt(config.formatExt)\n      this.formatExtCtx = formatExt.getFormatExt()\n    } else {\n      this.formatExtCtx = processWordWrap\n    }\n  }\n\n  /**\n   * send api request to yuque\n   * @param api\n   * @param reqOpts\n   */\n  async request<T>(api: string, reqOpts: RequestOptions): Promise<T> {\n    const { token } = this.config\n    let baseUrl = this.config.baseUrl || DEFAULT_API_URL\n    if (baseUrl.endsWith('/')) {\n      // 删除最后一个斜杠\n      baseUrl = baseUrl.slice(0, -1)\n    }\n    const url = `${baseUrl}/${api}`\n    const opts: RequestOptions = {\n      headers: {\n        'X-Auth-Token': token,\n      },\n      ...reqOpts,\n    }\n    const res = await request<YuQueResponse<T>>(url, opts)\n    if (res.status !== 200) {\n      out.warning(JSON.stringify(res))\n    }\n    return res.data.data\n  }\n\n  /**\n   * 获取目录\n   */\n  async getToc() {\n    return this.request<YuqueCatalog[]>(`repos/${this.namespace}/toc`, {\n      method: 'GET',\n    })\n  }\n\n  /**\n   * 获取文章列表(不带详情)\n   */\n  async getDocList() {\n    return this.request<YuqueDoc[]>(`repos/${this.namespace}/docs`, {\n      method: 'GET',\n    })\n  }\n\n  /**\n   * 获取文章详情\n   */\n  async getDocDetail(slug: string) {\n    const yuqueDoc = await this.request<YuqueDocDetail>(`repos/${this.namespace}/docs/${slug}`, {\n      method: 'GET',\n      data: { raw: 1 },\n    })\n    const docInfo = yuqueDoc as DocUnite\n    docInfo.doc_id = yuqueDoc.slug\n    const find = this.catalog.find((item) => item.slug === yuqueDoc.slug)\n    if (find) {\n      let catalogPath = []\n      let parentId = find.parent_uuid\n      for (let i = 0; i < find.depth - 1; i++) {\n        const current = this.catalog.find((item) => item.uuid === parentId)!\n        parentId = current.parent_uuid\n        const catalog: DocCatalog = {\n          title: current.title,\n          doc_id: yuqueDoc.slug,\n        }\n        catalogPath.push(catalog)\n      }\n      docInfo.catalog = catalogPath.reverse()\n    }\n    // 处理HTML\n    docInfo.body_html = processHtmlRaw(docInfo.body_html)\n    return docInfo\n  }\n\n  /**\n   * 获取文章详情列表\n   * @param cachedDocs\n   * @param ids\n   */\n  async getDocDetailList(cachedDocs: YuqueDoc[], ids: string[]) {\n    // 获取目录信息\n    this.catalog = await this.getToc()\n    let articleList: DocDetail[] = []\n    let docs = cachedDocs\n    if (ids.length) {\n      // 取交集，过滤不需要下载的page\n      docs = docs.filter((doc) => {\n        const exist = ids.indexOf(doc.slug) > -1\n        if (!exist) {\n          out.info('跳过下载', doc.title)\n        }\n        return exist\n      })\n    }\n    if (!docs?.length) {\n      out.access('跳过', '没有需要下载的文章')\n      return articleList\n    }\n    out.info('待下载数', String(docs.length))\n    out.info('开始下载文档...')\n    docs = docs.map((item, index) => ({ ...item, _index: index + 1 } as YuqueDoc))\n    const promise = async (doc: YuqueDoc) => {\n      out.info(`下载文档 ${doc._index}/${docs.length}   `, doc.title)\n      let article = await this.getDocDetail(doc.slug)\n      article.body_original = article.body\n      // 解析出properties\n      const { body, properties } = getProps(article)\n      // 处理语雀字符串\n      let newBody = processMarkdownRaw(body)\n      // 处理换行/自定义处理\n      newBody = this.formatExtCtx({ ...article, body: newBody })\n      article.properties = properties as YuqueDocProperties\n      // 替换body\n      article.body = newBody\n      article.updated = new Date(article.updated_at).getTime()\n      articleList.push(article)\n    }\n    await asyncPool(5, docs, promise)\n    out.info('已下载数', String(articleList.length))\n    return articleList\n  }\n}\n\nexport default YuqueClient\n","import frontMatter from 'front-matter'\nimport moment from 'moment'\nimport unified from 'unified'\nimport { DocUnite, GetProps } from './types'\nimport rehypeParse from 'rehype-parse'\nimport rehypeStringify from 'rehype-stringify'\nimport { out } from '@elog/shared'\n\n/**\n * 生成元数据\n */\nexport const getProps = (page: DocUnite): GetProps => {\n  let { body } = page\n  let properties = {\n    // 注入title\n    title: page.title,\n    // urlname\n    urlname: page.slug,\n    // 作者\n    author: page.book.user.name,\n    // 创建时间\n    date: formatDate(page.created_at),\n    // 更新时间\n    updated: formatDate(page.updated_at),\n  }\n  try {\n    // front matter信息的<br/>换成 \\n\n    const regex = /^---[\\s|\\S]+?---/i\n    body = body.replace(regex, (a) => a.replace(/(<br \\/>|<br>|<br\\/>)/gi, '\\n'))\n    const result = frontMatter(body)\n    body = result.body\n    let attributes = <Record<string, string>>result.attributes\n    properties = {\n      ...properties,\n      ...attributes,\n    }\n\n    return {\n      body,\n      properties,\n    }\n  } catch (e: any) {\n    out.warning(e.message)\n    out.warning('front-matter解析失败，将返回预定义属性')\n    out.warning('预定义属性：https://elog.1874.cool/notion/raqyleng501h23p1#预定义属性')\n    return {\n      body,\n      properties,\n    }\n  }\n}\n\n/**\n * 格式化日期\n * @param date\n */\nexport function formatDate(date: Date) {\n  return moment(date).format('YYYY-MM-DD HH:mm:ss')\n}\n\n/**\n * 处理语雀字符串\n */\nexport function processMarkdownRaw(raw: string) {\n  // 处理不可见字符\n  const nul = /\\x00/g\n  const nul1 = /\\u0000/g\n  const emptyAnchor = /<a name=\\\".*?\\\"><\\/a>/g\n  const hiddenContent = /<div style=\"display:none\">[\\s\\S]*?<\\/div>/gi\n  raw = raw.replace(nul, '').replace(nul1, '').replace(hiddenContent, '').replace(emptyAnchor, '')\n  return raw\n}\n\n/**\n * 处理换行\n * @param doc\n */\nexport function processWordWrap(doc: { body: string }) {\n  let { body: raw } = doc\n  const multiBr = /(<br>[\\s\\n]){2}/gi\n  const multiBrEnd = /(<br \\/>[\\n]?){2}/gi\n  const brBug = /<br \\/>/g\n  // 删除语雀特有的锚点\n  raw = raw.replace(multiBr, '<br>').replace(multiBrEnd, '<br />\\n').replace(brBug, '\\n')\n  return raw\n}\n\n/**\n * 不处理\n * @param doc\n */\nexport function noProcess(doc: { body: string }) {\n  let { body: raw } = doc\n  return raw\n}\n\n/**\n * 语雀css文件\n */\nconst cssStyle = [\n  {\n    type: 'element',\n    tagName: 'link',\n    properties: {\n      rel: ['stylesheet'],\n      href: 'http://editor.yuque.com/ne-editor/lake-content-v1.css',\n    },\n    children: [],\n  },\n  {\n    type: 'text',\n    value: '\\n    ',\n  },\n]\n\nconst findHead = (node: any) => {\n  // 如果当前节点是一个 element，而且它的 tagName 是 \"head\"，那么就返回它\n  if (node.type === 'element' && node.tagName === 'head') {\n    node.children.push(...cssStyle)\n  }\n  // 否则，继续递归遍历它的 children 数组\n  if (node.children) {\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i]\n      findHead(child)\n    }\n  }\n}\n\n/**\n * 处理Html\n * @param content\n */\nconst processHtml = (content: string) => {\n  const processValue = unified()\n    .use(rehypeParse)\n    .use(() => (tree) => {\n      // processTable(tree)\n      findHead(tree)\n    })\n    .use(rehypeStringify)\n    // 开始同步执行解析\n    .processSync(content)\n  return processValue.contents as string\n}\n\n/**\n * 处理语雀的HTML\n * @param html\n */\nexport const processHtmlRaw = (html: string) => {\n  // 给语雀的HTML头部加上css文件\n  try {\n    return processHtml(html)\n  } catch (e) {\n    out.warning('HTML解析失败，将返回原始HTML')\n    return html\n  }\n}\n","import { FormatExtConfig, FormatExtFunction } from './types'\nimport { out } from '@elog/shared'\nimport path from 'path'\nimport { noProcess, processWordWrap } from './utils'\n\n/**\n * 自定义处理器\n */\nexport class FormatExt {\n  formatExt?: FormatExtConfig = true\n  ctx: FormatExtFunction\n\n  constructor(config?: FormatExtConfig) {\n    this.formatExt = config\n    this.ctx = this.initFormatExt()\n  }\n\n  /**\n   * 初始化适配器\n   * @private\n   */\n  private initFormatExt(): FormatExtFunction {\n    if (typeof this.formatExt === 'boolean') {\n      if (this.formatExt) {\n        // 开启默认处理逻辑\n        return processWordWrap\n      } else {\n        // 不处理\n        return noProcess\n      }\n    } else if (typeof this.formatExt === 'string') {\n      out.warning('注意', '正在加载文档处理拓展点，请遵循文档处理拓展点注入规范')\n      try {\n        // 加载拓展点\n        const formatExtPath = path.resolve(process.cwd(), this.formatExt)\n        // 拓展点需要暴露format方法\n        const { format } = require(formatExtPath)\n        return format\n      } catch (e: any) {\n        out.err(e.message)\n        out.err('文档处理拓展点加载失败，请检查！')\n        process.exit(1)\n      }\n    } else if (typeof this.formatExt === 'function') {\n      return this.formatExt\n    } else {\n      out.warning('文档处理拓展点配置错误，将使用默认逻辑')\n      return processWordWrap\n    }\n  }\n\n  /**\n   * 获取文档处理器\n   */\n  public getFormatExt() {\n    return this.ctx\n  }\n}\n","import type { YuqueConfig, YuqueDoc } from './types'\nimport YuqueClient from './client'\nimport { BaseDoc } from '@elog/types'\nimport { out } from '@elog/shared'\n\n/**\n * Yuque SDK\n * @class\n */\nclass Yuque {\n  config: YuqueConfig\n  ctx: YuqueClient\n  pages: YuqueDoc[] = []\n\n  constructor(options: YuqueConfig) {\n    this.config = options\n    this.ctx = new YuqueClient(this.config)\n  }\n\n  /**\n   * list docs of a repo\n   * @return {Promise<DocDetail[]>} return docs\n   */\n  async getDocList(): Promise<BaseDoc[]> {\n    out.info('正在获取文档列表，请稍等...')\n    let pages = await this.ctx.getDocList()\n    // 过滤未发布和公开的文章\n    pages = pages\n      .filter((page) => {\n        return this.config.onlyPublic ? !!page.public : true\n      })\n      .filter((page) => {\n        return this.config.onlyPublished ? !!page.status : true\n      })\n    this.pages = pages\n    out.info('文档总数', String(this.pages.length))\n    return pages.map((page) => {\n      const timestamp = new Date(page.updated_at).getTime()\n      return {\n        // 暂时只需要返回这些属性\n        id: String(page.id),\n        doc_id: page.slug,\n        updated: timestamp,\n      }\n    })\n  }\n\n  /**\n   * 获取文章详情列表\n   * @param ids 需要下载的doc_id列表\n   */\n  async getDocDetailList(ids: string[]) {\n    return await this.ctx.getDocDetailList(this.pages, ids)\n  }\n}\n\nexport default Yuque\n","export * from './types'\n\nimport Yuque from './core'\n\nexport default Yuque\n"]}