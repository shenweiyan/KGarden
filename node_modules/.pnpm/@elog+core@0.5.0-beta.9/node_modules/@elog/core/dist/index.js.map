{"version":3,"sources":["../src/client.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// write\nimport YuqueClient, { YuqueConfig } from '@elog/sdk-yuque'\nimport NotionClient, { NotionConfig } from '@elog/sdk-notion'\nimport FlowUsClient, { FlowUsConfig } from '@elog/sdk-flowus'\n// deploy\nimport DeployClient, { DeployConfig } from '@elog/deploy'\n// imageClient\nimport ImageClient from '@elog/plugin-image'\n// types\nimport { ElogConfig, CacheJSON, DocStatusMap } from './types'\nimport { BaseDoc, DocDetail } from '@elog/types'\n// const\nimport { WritePlatform, DocStatus } from './const'\n// utils\nimport { out } from '@elog/shared'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as process from 'process'\n\n/**\n * 处理器\n */\nclass Elog {\n  /** 配置文件 */\n  config: ElogConfig\n  /** 下载器 */\n  downloaderClient: any\n  /** 部署器 */\n  deployClient: any\n  /** 图片转CDN转换器 */\n  imageClient: any\n  /** 缓存文章 */\n  cachedArticles: DocDetail[] = []\n  /** 是否需要更新，当所有文章都不需要更新，这个标记就会阻止后续流程 */\n  needUpdate = false\n  /** 待更新的文章列表 */\n  needUpdateArticles: DocDetail[] = []\n\n  constructor(config: ElogConfig) {\n    // 初始化配置\n    this.config = config\n    // 初始化增量配置\n    this.initIncrementalUpdate(config)\n    // 初始化写作平台\n    this.initWritingPlatform(config)\n    // 初始化部署平台\n    this.initDeployPlatform(config)\n    // 初始化图片转CDN\n    this.initImgCdn(config)\n  }\n\n  /**\n   * 初始化增量配置\n   * @param config\n   */\n  initIncrementalUpdate(config: ElogConfig) {\n    try {\n      const cacheJson: CacheJSON = require(path.join(process.cwd(), config.extension.cachePath))\n      const { docs } = cacheJson\n      // 获取缓存文章\n      this.cachedArticles = docs || []\n    } catch (error) {\n      out.access('全量更新', '未获取到缓存，将全量更新文档')\n    }\n  }\n\n  /**\n   * 初始化写作平台\n   * @param config\n   */\n  initWritingPlatform(config: ElogConfig) {\n    if (config.write.platform === WritePlatform.YUQUE) {\n      let yuqueConfig = config.write.yuque as YuqueConfig\n      this.downloaderClient = new YuqueClient(yuqueConfig)\n    } else if (config.write.platform === WritePlatform.NOTION) {\n      let notionConfig = config.write.notion as NotionConfig\n      this.downloaderClient = new NotionClient(notionConfig)\n    } else if (config.write.platform === WritePlatform.FLOWUS) {\n      let flowusConfig = config.write.flowus as FlowUsConfig\n      this.downloaderClient = new FlowUsClient(flowusConfig)\n    }\n  }\n\n  /**\n   * 初始化部署平台\n   * @param config\n   */\n  initDeployPlatform(config: ElogConfig) {\n    const deployOptions = config.deploy as DeployConfig\n    this.deployClient = new DeployClient(deployOptions)\n  }\n\n  /**\n   * 初始化图片转CDN配置\n   * @param config\n   */\n  initImgCdn(config: ElogConfig) {\n    if (config.image?.enable) {\n      if (config.write.platform === WritePlatform.FLOWUS) {\n        // FlowUs对图片的下载有referer限制\n        // 所以需要在下载图片的时候加上referer=https://flowus.cn/\n        // 这里使用过环境变量的方式添加\n        process.env.REFERER_URL = 'https://flowus.cn/'\n      }\n      this.imageClient = new ImageClient(config.image)\n    }\n  }\n\n  /**\n   * 下载文章详情列表\n   */\n  async fetchArticles() {\n    let articleList = (await this.downloaderClient.getDocList()) as BaseDoc[]\n    if (!articleList?.length) {\n      this.needUpdate = false\n      return\n    }\n    // 过滤掉被删除的文章\n    this.cachedArticles = this.cachedArticles.filter(\n      (cache) => articleList.findIndex((item) => item.doc_id === cache.doc_id) !== -1,\n    )\n    let ids: string[] = []\n    let idMap: DocStatusMap = {}\n    for (const article of articleList) {\n      // 判断哪些文章是新增的\n      const cacheIndex = this.cachedArticles.findIndex(\n        (cacheItem) => cacheItem.doc_id === article.doc_id,\n      )\n      // 新增的则加入需要下载的ids列表\n      if (cacheIndex < 0) {\n        // cacheIndex = _cachedArticles.length;\n        ids.push(article.doc_id)\n        // 记录被更新文章状态\n        idMap[article.doc_id] = {\n          status: DocStatus.create,\n        }\n      } else {\n        // 不是新增的则判断是否文章更新了\n        const cacheArticle = this.cachedArticles[cacheIndex]\n        const cacheAvailable = article.updated === cacheArticle.updated\n        if (!cacheAvailable) {\n          // 如果文章更新了则加入需要下载的ids列表, 没有更新则不需要下载\n          ids.push(article.doc_id)\n          // 记录被更新文章状态和索引\n          idMap[article.doc_id] = {\n            index: cacheIndex,\n            status: DocStatus.update,\n          }\n        }\n      }\n    }\n    // 没有则不需要更新\n    if (!ids.length) {\n      this.needUpdate = false\n      return\n    }\n    this.needUpdate = true\n    let docDetailList = (await this.downloaderClient.getDocDetailList(ids)) as DocDetail[]\n    // 处理文章的图片\n    if (this.config.image?.enable) {\n      docDetailList = await this.processImage(docDetailList)\n    }\n    // 缓存需要更新的文档\n    this.needUpdateArticles = docDetailList\n    // 更新缓存里的文章\n    for (const docDetail of docDetailList) {\n      const { index, status } = idMap[docDetail.doc_id]\n      if (status === DocStatus.create) {\n        // 新增文档\n        this.cachedArticles.push(docDetail)\n      } else {\n        // 更新文档\n        this.cachedArticles[index!] = docDetail\n      }\n    }\n  }\n\n  /**\n   * 写入语雀的文章缓存 json 文件\n   */\n  writeArticleCache() {\n    try {\n      let catalog: any[] = []\n      if (this.config.write.platform === WritePlatform.YUQUE) {\n        const yuqueClient = this.downloaderClient as YuqueClient\n        catalog = yuqueClient.ctx.catalog\n      } else if (this.config.write.platform === WritePlatform.NOTION) {\n        const notionClient = this.downloaderClient as NotionClient\n        catalog = notionClient.ctx.catalog\n      } else if (this.config.write.platform === WritePlatform.FLOWUS) {\n        const flowusClient = this.downloaderClient as FlowUsClient\n        catalog = flowusClient.ctx.catalog\n      }\n\n      let cacheDocs: DocDetail[] = this.cachedArticles.map((item) => {\n        // 只缓存重要属性\n        return {\n          id: item.id,\n          doc_id: item.doc_id,\n          title: item.doc_id,\n          updated: item.updated,\n          body_original: item.body_original,\n          properties: item.properties,\n          catalog: item.catalog,\n          body: '',\n        }\n      })\n      if (this.config.extension?.isFullCache) {\n        // 缓存全部属性\n        cacheDocs = this.cachedArticles\n      }\n      const cacheJson: CacheJSON = {\n        docs: cacheDocs,\n        catalog,\n      }\n      fs.writeFileSync(this.config.extension.cachePath, JSON.stringify(cacheJson, null, 2), {\n        encoding: 'utf8',\n      })\n    } catch (e: any) {\n      out.warning('缓存失败', `写入缓存信息失败，请检查${e.message}`)\n    }\n  }\n\n  /**\n   * 处理文章图片\n   */\n  async processImage(docDetailList: DocDetail[]) {\n    return await this.imageClient.replaceImages(docDetailList)\n  }\n\n  /**\n   * 部署文章\n   */\n  async deployArticles() {\n    await this.deployClient.deploy(this.needUpdateArticles)\n  }\n\n  // 下载文档 => 增量更新文章到缓存 json 文件\n  async deploy() {\n    // 下载文档\n    await this.fetchArticles()\n    if (!this.needUpdate) {\n      // 结束进程\n      out.access('任务结束', '没有需要更新的文档')\n      return\n    }\n    // 写入文章缓存\n    this.writeArticleCache()\n    // 部署文章\n    await this.deployArticles()\n  }\n}\n\nexport default Elog\n","import Elog from './client'\n\nexport default Elog\n\n// core api\nexport * from './types'\n// deploy api\nexport * from '@elog/deploy'\n// plugin-image api\nexport * from '@elog/plugin-image'\n// sdk-flowus api\nexport * from '@elog/sdk-flowus'\n// sdk-notion api\nexport * from '@elog/sdk-notion'\n// sdk-yuque api\nexport * from '@elog/sdk-yuque'\n// shared api\nexport * from '@elog/shared'\n"]}