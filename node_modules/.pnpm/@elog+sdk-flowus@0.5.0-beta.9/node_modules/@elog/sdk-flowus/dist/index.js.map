{"version":3,"sources":["../src/client.ts","../src/utils.ts","../src/core.ts","../src/index.ts"],"names":["out"],"mappings":"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","sourcesContent":["import { out } from '@elog/shared'\nimport { FlowUsCatalogConfig, FlowUsConfig, FlowUsDoc, FlowUsFilterAndSortParams } from './types'\nimport { FlowUsClient as FlowUsApi } from '@flowusx/flowus-client'\nimport { FlowUsToMarkdown } from '@flowusx/flowus-to-md'\nimport { DocCatalog, DocDetail } from '@elog/types'\nimport { filterDocs, genCatalog, props, sortDocs } from './utils'\nimport asyncPool from 'tiny-async-pool'\nimport { FlowUsSortDirectionEnum, FlowUsSortPresetEnum } from './const'\n\nclass FlowUsClient {\n  config: FlowUsConfig\n  flowus: FlowUsApi\n  f2m: FlowUsToMarkdown\n  catalog: FlowUsDoc[] = []\n  filterAndSortParams: FlowUsFilterAndSortParams\n\n  constructor(config: FlowUsConfig) {\n    this.config = config\n    this.config.tablePageId = config.tablePageId || process.env.FLOWUS_TABLE_PAGE_ID!\n    if (!this.config.tablePageId) {\n      out.err('缺少参数', '缺少 Table Page ID')\n      process.exit(-1)\n    }\n    this.flowus = new FlowUsApi()\n    this.f2m = new FlowUsToMarkdown({ client: this.flowus })\n    this.initCatalogConfig()\n    this.filterAndSortParams = this.initFilterAndSortParamsParams()\n  }\n\n  /**\n   * 初始化目录配置\n   */\n  initCatalogConfig() {\n    if (typeof this.config.catalog === 'boolean') {\n      if (!this.config.catalog) {\n        // 不启用目录\n        this.config.catalog = { enable: false }\n      } else {\n        // 启用目录\n        out.access('开启分类', '默认按照 catalog 字段分类，请检查FlowUs多维表是否存在该属性')\n        this.config.catalog = { enable: true, property: 'catalog' }\n      }\n    } else if (typeof this.config.catalog === 'object') {\n      if (this.config.catalog.enable) {\n        // 检查分类字段是否存在\n        if (!this.config.catalog.property) {\n          this.config.catalog.property = 'catalog'\n          out.warning('未设置分类字段，默认按照 catalog 字段分类，请检查FlowUs多维表是否存在该属性')\n        }\n      }\n    }\n  }\n\n  /**\n   * 初始化过滤和排序参数\n   */\n  initFilterAndSortParamsParams(): FlowUsFilterAndSortParams {\n    let sort = this.config.sort as FlowUsFilterAndSortParams['sort']\n    if (typeof this.config.sort === 'boolean') {\n      if (!this.config.sort) {\n        // 不排序\n        sort = undefined\n      } else {\n        // 默认排序\n        sort = { property: 'createdAt', direction: FlowUsSortDirectionEnum.descending }\n      }\n    } else if (typeof this.config.sort === 'string') {\n      // 预设值\n      const sortPreset = this.config.sort as FlowUsSortPresetEnum\n      switch (sortPreset) {\n        case FlowUsSortPresetEnum.dateDesc:\n          sort = { property: 'date', direction: FlowUsSortDirectionEnum.descending }\n          break\n        case FlowUsSortPresetEnum.dateAsc:\n          sort = { property: 'date', direction: FlowUsSortDirectionEnum.ascending }\n          break\n        case FlowUsSortPresetEnum.sortDesc:\n          sort = { property: 'sort', direction: FlowUsSortDirectionEnum.descending }\n          break\n        case FlowUsSortPresetEnum.sortAsc:\n          sort = { property: 'sort', direction: FlowUsSortDirectionEnum.ascending }\n          break\n        case FlowUsSortPresetEnum.createTimeDesc:\n          sort = {\n            property: 'createdAt',\n            direction: FlowUsSortDirectionEnum.descending,\n          }\n          break\n        case FlowUsSortPresetEnum.createTimeAsc:\n          sort = {\n            property: 'createdAt',\n            direction: FlowUsSortDirectionEnum.ascending,\n          }\n          break\n        case FlowUsSortPresetEnum.updateTimeDesc:\n          sort = {\n            property: 'updatedAt',\n            direction: FlowUsSortDirectionEnum.descending,\n          }\n          break\n        case FlowUsSortPresetEnum.updateTimeAsc:\n          sort = {\n            property: 'updatedAt',\n            direction: FlowUsSortDirectionEnum.ascending,\n          }\n          break\n        default:\n          sort = {\n            property: 'createdAt',\n            direction: FlowUsSortDirectionEnum.descending,\n          }\n      }\n    }\n\n    let filter = this.config.filter as FlowUsFilterAndSortParams['filter']\n    // 如果是boolean类型\n    if (typeof this.config.filter === 'boolean') {\n      // 如果设置为false\n      if (!this.config.filter) {\n        filter = undefined\n      } else {\n        // 如果设置为true\n        filter = {\n          property: 'status',\n          value: '已发布',\n        }\n      }\n    }\n    return {\n      filter,\n      sort,\n    }\n  }\n\n  async getPageList(): Promise<FlowUsDoc[]> {\n    const pageBlocks = await this.flowus.getDataTableData(this.config.tablePageId)\n    const blocks = pageBlocks.blocks\n    const blocksKeys = Object.keys(blocks)\n    const tableBlockKey = blocksKeys[0]\n    const tableBlock = blocks[tableBlockKey]\n    const pageIds = tableBlock.subNodes\n    const { filter, sort } = this.filterAndSortParams\n    let filterAndSortDoc = pageIds.map((pageId) => {\n      const pageBLock = blocks[pageId]\n      const properties = props(pageBLock, tableBlock)\n      return {\n        id: pageBLock.uuid,\n        doc_id: pageBLock.uuid,\n        title: pageBLock.title,\n        updated: pageBLock.updatedAt,\n        createdAt: pageBLock.createdAt,\n        updatedAt: pageBLock.updatedAt,\n        properties,\n      }\n    }) as FlowUsDoc[]\n    // 过滤\n    filterAndSortDoc = filterDocs(filterAndSortDoc, filter)\n    // 排序\n    filterAndSortDoc = sortDocs(filterAndSortDoc, sort)\n    this.catalog = filterAndSortDoc\n    return filterAndSortDoc\n  }\n\n  async download(page: FlowUsDoc): Promise<DocDetail> {\n    let body = ''\n    try {\n      const pageBlocks = await this.flowus.getPageBlocks(page.id)\n      body = this.f2m.toMarkdownString(pageBlocks)\n    } catch (e: any) {\n      out.warning(`${page.title} 下载出错: ${e.message}`)\n    }\n    const doc = {\n      id: page.id,\n      properties: page.properties,\n    }\n    let catalog: DocCatalog[] | undefined\n    const catalogConfig = this.config.catalog as FlowUsCatalogConfig\n    if (catalogConfig?.enable) {\n      // 生成目录\n      catalog = genCatalog(doc, catalogConfig.property!)\n    }\n    return {\n      ...doc,\n      body,\n      body_original: body,\n      doc_id: page.id,\n      updated: page.updated,\n      catalog,\n    }\n  }\n\n  async getPageDetailList(cachedPages: FlowUsDoc[], ids: string[]) {\n    let articleList: DocDetail[] = []\n    let pages: FlowUsDoc[] = cachedPages\n    if (ids?.length) {\n      // 取交集，过滤不需要下载的page\n      pages = pages.filter((page) => {\n        const exist = ids.indexOf(page.id) > -1\n        if (!exist) {\n          const title = page.title\n          out.info('跳过下载', title)\n        }\n        return exist\n      })\n    }\n    if (!pages?.length) {\n      out.info('跳过', '没有需要下载的文章')\n      return articleList\n    }\n    out.info('待下载数', String(pages.length))\n    out.info('开始下载文档...')\n    pages = pages.map((item, index) => ({ ...item, _index: index + 1 } as FlowUsDoc))\n    const promise = async (page: FlowUsDoc) => {\n      out.info(`下载文档 ${page._index}/${pages.length}   `, page.title)\n      let article = await this.download(page)\n      articleList.push(article)\n    }\n    await asyncPool(5, pages, promise)\n    out.info('已下载数', String(articleList.length))\n    return articleList\n  }\n}\n\nexport default FlowUsClient\n","import { out } from '@elog/shared'\nimport { DocCatalog, DocProperties } from '@elog/types'\nimport { Block } from '@flowusx/flowus-types'\nimport moment from 'moment'\nimport { FlowUsDoc, FlowUsFilterItem, FlowUsSortItem } from './types'\nimport { FlowUsSortDirectionEnum } from './const'\n\n/**\n * 格式化时间\n * @param date\n */\nexport function formatDate(date: Date | string | number) {\n  return moment(date).format('YYYY-MM-DD HH:mm:ss')\n}\n\n/**\n * 获取元数据Val\n * @param type\n * @param val\n * @param pageTitle\n */\nexport function getPropVal(type: string, val: any, pageTitle: string) {\n  if (!val) return ''\n  switch (type) {\n    case 'text':\n    case 'email':\n    case 'url':\n    case 'select':\n    case 'number':\n    case 'phone':\n      return val.text\n    case 'file':\n      // 暂不支持\n      out.debug(`【${pageTitle}】存在暂不支持的属性类型:【文件媒体】, 建议将其上传到图床后使用`)\n      return ''\n    // return val.url\n    case 'checkbox':\n      return val.text === 'YES'\n    case 'formula':\n      out.debug(`【${pageTitle}】存在暂不支持的属性类型:【公式】`)\n      return ''\n    // case 'created_at':\n    //   // 创建时间直接在外面取值\n    //   return ''\n    // case 'updated_at':\n    //   // 更新时间直接在外面取值\n    //   return ''\n    case 'date':\n      return val.startDate.replace('/', '-') + ' ' + val.startTime\n    case 'multi_select':\n      return val.text.split(',')\n    case 'person':\n      out.debug(`【${pageTitle}】存在暂不支持的属性类型:【人员】`)\n      // return val.uuid\n      return ''\n    default:\n      return val.text || ''\n  }\n}\n\n/**\n * 判断是否是多维数组\n * @param arr\n */\nconst isMultiArray = (arr: any[]) => {\n  if (Array.isArray(arr)) {\n    // 判断是否是数组\n    for (let i = 0; i < arr.length; i++) {\n      if (Array.isArray(arr[i])) {\n        // 判断数组元素是否也是数组\n        return true // 是多维数组，返回true\n      }\n    }\n  }\n  return false // 不是多维数组，返回false\n}\n\n/**\n * 生成元数据\n * @returns {Object}\n * @param pageBlock\n * @param tableBlock\n */\nexport function props(pageBlock: Block, tableBlock: Block): DocProperties {\n  // 获取properties\n  let properties: any = {}\n  properties.urlname = pageBlock.uuid\n  properties.title = pageBlock.title\n  properties.updated = formatDate(pageBlock.updatedAt)\n  properties.date = formatDate(pageBlock.createdAt)\n  const pageProperties = pageBlock.data.collectionProperties\n  if (!pageProperties) return properties\n  const propIds = Object.keys(pageProperties)\n  if (!propIds.length) return properties\n  propIds.forEach((propId) => {\n    const propConfig = tableBlock.data.schema[propId]\n    if (!propConfig) return\n    const propName = propConfig.name\n    const propType = propConfig.type\n    // 判断类型，进行不同类型的取值\n    const propValList = pageProperties[propId].map((value) => {\n      return getPropVal(propType, value, pageBlock.title) as string | string[]\n    })\n    if (!propValList.length) return\n    // 判断propValList是否是多维数组\n    const isMulti = isMultiArray(propValList)\n    let propVal: string | string[]\n    // 如果propValList是多维数组，则join('')\n    if (!isMulti) {\n      propVal = propValList.join('')\n    } else {\n      // 如果propValList是二维数组，则flat()\n      propVal = propValList.flat().filter(Boolean)\n    }\n    if (!propVal?.length) return\n    properties[propName] = propVal\n  })\n  return properties\n}\n\n/**\n * 获取目录信息\n * @param page\n * @param property\n */\nexport function genCatalog(\n  page: { id: string; properties: DocProperties },\n  property: string,\n): DocCatalog[] | undefined {\n  const catalog = page.properties[property]\n  if (!catalog) {\n    out.warning(`${page.properties.title} ${property} 属性缺失`)\n    return undefined\n  } else if (typeof catalog === 'string') {\n    // 单选\n    return [\n      {\n        title: catalog,\n        doc_id: page.id,\n      },\n    ]\n  } else if (Array.isArray(catalog)) {\n    // 多选\n    return catalog.map((item) => {\n      return {\n        title: item,\n        doc_id: page.id,\n      }\n    })\n  } else {\n    // 没有值\n    out.warning(`${page.properties.title} 文档分类信息提取失败，${property} 字段只能是单选/多选`)\n    return undefined\n  }\n}\n\n/**\n * 文档排序\n * @param docs\n * @param sorts\n */\nexport function sortDocs(docs: FlowUsDoc[], sorts?: FlowUsSortItem) {\n  return docs.sort((a, b) => {\n    if (sorts) {\n      let aSortValue = a.properties[sorts.property]\n      let bSortValue = b.properties[sorts.property]\n      const sortDirection = sorts.direction\n      // 如果不存在则不排序\n      if (!aSortValue || !bSortValue) {\n        return 0\n      }\n      // 判断是不是数字\n      if (Number.isNaN(Number(aSortValue)) || Number.isNaN(Number(bSortValue))) {\n        // 如果判断字符串是不是时间\n        if (moment(aSortValue).isValid() && moment(bSortValue).isValid()) {\n          // 将2023/05/08 00:00转成时间戳\n          aSortValue = moment(aSortValue).valueOf()\n          bSortValue = moment(bSortValue).valueOf()\n        } else {\n          // 都不是则排后面\n          return -1\n        }\n      } else {\n        aSortValue = Number(aSortValue)\n        bSortValue = Number(bSortValue)\n      }\n\n      if (sortDirection === FlowUsSortDirectionEnum.ascending) {\n        // 正序排序\n        return aSortValue - bSortValue\n      } else if (sortDirection === FlowUsSortDirectionEnum.descending) {\n        // 倒序排序\n        return bSortValue - aSortValue\n      } else {\n        // 属性错误\n        return 0\n      }\n    } else {\n      // 不排序\n      return 0\n    }\n  })\n}\n\n/**\n * 文档过滤\n * @param docs\n * @param filter\n */\nexport function filterDocs(docs: FlowUsDoc[], filter?: FlowUsFilterItem | FlowUsFilterItem[]) {\n  return docs.filter((page) => {\n    const pageProperties = page.properties\n    // 过滤\n    if (filter && Array.isArray(filter)) {\n      return filter.every((f) => {\n        return pageProperties[f.property] === f.value\n      })\n      // 如果是对象\n    } else if (typeof filter === 'object') {\n      return pageProperties[filter.property] === filter.value\n    }\n    // 不过滤\n    return true\n  })\n}\n","import { FlowUsConfig, FlowUsDoc } from './types'\nimport FlowUsClient from './client'\nimport { BaseDoc } from '@elog/types'\nimport { out } from '@elog/shared'\n\nclass FlowUs {\n  config: FlowUsConfig\n  ctx: FlowUsClient\n  pages: FlowUsDoc[] = []\n\n  constructor(config: FlowUsConfig) {\n    this.config = config\n    this.ctx = new FlowUsClient(config)\n  }\n\n  /**\n   * 获取文章列表（不含详情）\n   */\n  async getDocList(): Promise<BaseDoc[]> {\n    out.info('正在获取文档列表，请稍等...')\n    const pages = await this.ctx.getPageList()\n    this.pages = pages\n    out.info('文档总数', String(this.pages.length))\n    return pages.map((page) => {\n      return {\n        // 暂时只需要返回这些属性\n        id: page.id,\n        doc_id: page.id,\n        updated: page.updated,\n      }\n    })\n  }\n\n  /**\n   * 获取文章详情列表\n   * @param ids 需要下载的doc_id列表\n   */\n  async getDocDetailList(ids: string[]) {\n    return await this.ctx.getPageDetailList(this.pages, ids)\n  }\n}\n\nexport default FlowUs\n","import FlowUs from './core'\nexport * from './types'\n\nexport default FlowUs\n"]}