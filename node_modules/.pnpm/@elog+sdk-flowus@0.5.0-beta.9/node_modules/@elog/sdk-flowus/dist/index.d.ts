import * as _elog_types from '@elog/types';
import { DocProperties, DocDetail, BaseDoc } from '@elog/types';
import { FlowUsClient as FlowUsClient$1 } from '@flowusx/flowus-client';
import { FlowUsToMarkdown } from '@flowusx/flowus-to-md';

declare enum FlowUsSortPresetEnum {
    /** 按自定义日期排序 */
    dateDesc = "dateDesc",
    dateAsc = "dateAsc",
    /** 按创建时间排序 */
    createTimeDesc = "createTimeDesc",
    createTimeAsc = "createTimeAsc",
    /** 按更新时间排序 */
    updateTimeDesc = "updateTimeDesc",
    updateTimeAsc = "updateTimeAsc",
    /** 按sort字段排序 */
    sortDesc = "sortDesc",
    sortAsc = "sortAsc"
}

interface FlowUsCatalogConfig {
    enable: boolean;
    property?: string;
}
interface FlowUsFilterItem {
    property: string;
    value: string;
}
interface FlowUsSortItem {
    property: string;
    direction: string;
}
type FlowUsFilter = boolean | FlowUsFilterItem | FlowUsFilterItem[];
type FlowUsSort = boolean | FlowUsSortPresetEnum | FlowUsSortItem;
interface FlowUsConfig {
    tablePageId: string;
    filter?: FlowUsFilter;
    sort?: FlowUsSort;
    catalog?: boolean | FlowUsCatalogConfig;
}
interface FlowUsDoc {
    id: string;
    doc_id: string;
    title: string;
    updated: number;
    properties: DocProperties;
    createdAt: number;
    updatedAt: number;
    _index?: number;
}
interface FlowUsFilterAndSortParams {
    filter?: FlowUsFilterItem | FlowUsFilterItem[];
    sort?: FlowUsSortItem;
}

declare class FlowUsClient {
    config: FlowUsConfig;
    flowus: FlowUsClient$1;
    f2m: FlowUsToMarkdown;
    catalog: FlowUsDoc[];
    filterAndSortParams: FlowUsFilterAndSortParams;
    constructor(config: FlowUsConfig);
    /**
     * 初始化目录配置
     */
    initCatalogConfig(): void;
    /**
     * 初始化过滤和排序参数
     */
    initFilterAndSortParamsParams(): FlowUsFilterAndSortParams;
    getPageList(): Promise<FlowUsDoc[]>;
    download(page: FlowUsDoc): Promise<DocDetail>;
    getPageDetailList(cachedPages: FlowUsDoc[], ids: string[]): Promise<DocDetail[]>;
}

declare class FlowUs {
    config: FlowUsConfig;
    ctx: FlowUsClient;
    pages: FlowUsDoc[];
    constructor(config: FlowUsConfig);
    /**
     * 获取文章列表（不含详情）
     */
    getDocList(): Promise<BaseDoc[]>;
    /**
     * 获取文章详情列表
     * @param ids 需要下载的doc_id列表
     */
    getDocDetailList(ids: string[]): Promise<_elog_types.DocDetail[]>;
}

export { FlowUsCatalogConfig, FlowUsConfig, FlowUsDoc, FlowUsFilter, FlowUsFilterAndSortParams, FlowUsFilterItem, FlowUsSort, FlowUsSortItem, FlowUs as default };
