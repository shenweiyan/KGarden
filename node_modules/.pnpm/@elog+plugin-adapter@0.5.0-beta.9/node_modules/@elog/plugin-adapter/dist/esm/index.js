var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/markdown/matter-markdown.ts
import matter from "gray-matter";

// src/utils.ts
import prettier from "prettier";
var formatMarkdown = (content) => {
  return prettier.format(content, { parser: "markdown" });
};
var formatHtml = (content) => {
  return prettier.format(content, {
    parser: "html"
  });
};
function formatRaw(body) {
  return formatMarkdown(body);
}

// src/markdown/matter-markdown.ts
import { out } from "@elog/shared";
function matterMarkdownAdapter(post) {
  var _a;
  let body = post.body;
  try {
    const properties = post.properties;
    const props = __spreadProps(__spreadValues({}, properties), {
      title: (_a = properties == null ? void 0 : properties.title) == null ? void 0 : _a.replace(/"/g, "")
      // 临时去掉标题中的引号，至少保证文章页面是正常可访问的
    });
    body = matter.stringify(body, props, { lineWidth: -1 });
  } catch (e) {
    out.err(e.message);
    out.warning(`\u3010${post.properties.title}\u3011Front matter \u751F\u6210\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u6587\u6863\u5C5E\u6027`);
  }
  return formatRaw(body);
}

// src/markdown/markdown.ts
function markdownAdapter(post) {
  let { body } = post;
  return formatRaw(body);
}

// src/wiki/render.ts
import { Renderer as MarkdownRenderer, marked } from "marked";
import { stringify } from "querystring";
var langMap = {
  javascript: "js",
  typescript: "js",
  java: "java",
  shell: "bash",
  html: "html",
  xml: "xml",
  yaml: "yml"
};
var WikiRenderer = class extends MarkdownRenderer {
  constructor() {
    super();
  }
  paragraph(text) {
    return text + "\n\n";
  }
  html(html) {
    return html;
  }
  heading(text, level) {
    return "h" + level + ". " + text + "\n\n";
  }
  strong(text) {
    return "*" + text + "*";
  }
  em(text) {
    return "_" + text + "_";
  }
  del(text) {
    return "-" + text + "-";
  }
  codespan(text) {
    return "{{" + text + "}}";
  }
  blockquote(quote) {
    return "{quote}" + quote + "{quote}";
  }
  br() {
    return "\n";
  }
  hr() {
    return "----";
  }
  link(href, _title, text) {
    const arr = [href];
    if (text) {
      arr.unshift(text);
    }
    return "[" + arr.join("|") + "]";
  }
  list(body, ordered) {
    const arr = body.trim().split("\n").filter(Boolean);
    const type = ordered ? "#" : "*";
    return arr.map((line) => {
      const isSub = line.startsWith(type);
      return "\n" + type + (isSub ? "" : " ") + line;
    }).join("") + "\n\n";
  }
  listitem(body) {
    return body + "\n";
  }
  image(href) {
    return "!" + href + "!";
  }
  table(header, body) {
    return header + body + "\n";
  }
  tablerow(content) {
    return content + "\n";
  }
  tablecell(content, flags) {
    const type = flags.header ? "||" : "|";
    return type + content;
  }
  code(code, lang) {
    if (lang) {
      lang = lang.toLowerCase();
      lang = langMap[lang] || "none";
    }
    let config = {
      language: lang,
      borderStyle: "solid",
      theme: "default",
      // dark is good
      linenumbers: true,
      collapse: false
    };
    const lineCount = code.split("\n").length;
    if (lineCount > 20) {
      config.collapse = true;
    }
    const param = stringify(config, "|", "=");
    return "{code:" + param + "}\n" + code + "\n{code}\n\n";
  }
};
var md2Wiki = (markdown) => {
  const wikiRenderer = new WikiRenderer();
  return marked.parse(markdown, { renderer: wikiRenderer });
};

// src/wiki/wiki.ts
function wikiAdapter(post) {
  const { body } = post;
  const markdown = formatRaw(body);
  return md2Wiki(markdown);
}

// src/html/html.ts
function htmlAdapter(post) {
  let { body_html = "" } = post;
  return formatHtml(body_html);
}
export {
  htmlAdapter,
  markdownAdapter,
  matterMarkdownAdapter,
  wikiAdapter
};
//# sourceMappingURL=index.js.map