var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/run.ts
import { program } from "commander";

// src/scripts/init.ts
import { out } from "@elog/shared";

// src/utils/gen-config-file.ts
import fs from "fs";
var configJsStr = "module.exports = {\n  write: {\n    platform: 'yuque',\n    yuque: {\n      token: process.env.YUQUE_TOKEN,\n      baseUrl: '',\n      login: process.env.YUQUE_LOGIN,\n      repo: process.env.YUQUE_REPO,\n      onlyPublic: false,\n      onlyPublished: true,\n    },\n    notion: {\n      token: process.env.NOTION_TOKEN,\n      databaseId: process.env.NOTION_DATABASE_ID,\n      filter: true, // {property: 'status', select: {equals: '\u5DF2\u53D1\u5E03'}}\n      sorts: true, // [{timestamp: 'created_time', direction: 'descending'}],\n      catalog: false,\n    },\n    flowus: {\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\n      filter: true, // {property: 'status',value: '\u5DF2\u53D1\u5E03'}\n      sort: true, // { property: 'createdAt', direction: 'descending' }\n      catalog: false,\n    },\n  },\n  deploy: {\n    platform: 'local',\n    local: {\n      outputDir: './docs',\n      filename: 'title',\n      format: 'markdown',\n      catalog: false,\n      formatExt: '',\n    },\n    confluence: {\n      user: process.env.CONFLUENCE_USER,\n      password: process.env.CONFLUENCE_PASSWORD,\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // \u53EF\u9009\n      formatExt: '', // \u53EF\u9009\n    },\n  },\n  image: {\n    enable: false,\n    platform: 'local',\n    local: {\n      outputDir: './docs/images',\n      prefixKey: '/images',\n    },\n    oss: {\n      secretId: process.env.OSS_SECRET_ID,\n      secretKey: process.env.OSS_SECRET_KEY,\n      bucket: process.env.OSS_BUCKET,\n      region: process.env.OSS_REGION,\n      host: process.env.OSS_HOST,\n      prefixKey: '',\n      secretExt: '', // \u53EF\u9009\n    },\n    cos: {\n      secretId: process.env.COS_SECRET_ID,\n      secretKey: process.env.COS_SECRET_KEY,\n      bucket: process.env.COS_BUCKET,\n      region: process.env.COS_REGION,\n      host: process.env.COS_HOST,\n      prefixKey: '',\n      secretExt: '', // \u53EF\u9009\n    },\n    qiniu: {\n      secretId: process.env.QINIU_SECRET_ID,\n      secretKey: process.env.QINIU_SECRET_KEY,\n      bucket: process.env.QINIU_BUCKET,\n      region: process.env.QINIU_REGION,\n      host: process.env.QINIU_HOST,\n      prefixKey: '',\n      secretExt: '', // \u53EF\u9009\n    },\n    upyun: {\n      user: process.env.UPYUN_USER,\n      password: process.env.UPYUN_PASSWORD,\n      bucket: process.env.UPYUN_BUCKET,\n      host: process.env.UPYUN_HOST,\n      prefixKey: '',\n      secretExt: '', // \u53EF\u9009\n    },\n    github: {\n      user: process.env.GITHUB_USER,\n      token: process.env.GITHUB_TOKEN,\n      repo: process.env.GITHUB_REPO,\n      branch: '',\n      host: '',\n      prefixKey: '',\n      secretExt: '', // \u53EF\u9009\n    },\n  },\n}\n";
var configJson = JSON.stringify(
  {
    write: {
      platform: "yuque",
      yuque: {
        token: "",
        baseUrl: "",
        login: "",
        repo: "",
        onlyPublic: false,
        onlyPublished: false
      },
      notion: {
        token: "",
        databaseId: "",
        filter: true,
        sorts: true,
        catalog: {
          enable: false,
          property: "catalog"
        }
      }
    },
    deploy: {
      platform: "local",
      local: {
        outputDir: "",
        filename: "title | urlname",
        format: "markdown | matter-markdown | wiki | html",
        catalog: false,
        formatExt: ""
        // 可选
      },
      confluence: {
        user: "",
        password: "",
        baseUrl: "",
        spaceKey: "",
        rootPageId: "",
        // 可选
        formatExt: ""
        // 可选
      }
    },
    image: {
      enable: true,
      platform: "cos",
      local: {
        outputDir: "",
        prefixKey: ""
      },
      oss: {
        secretId: "",
        secretKey: "",
        bucket: "",
        region: "",
        host: "",
        prefixKey: "",
        secretExt: ""
        // 可选
      },
      cos: {
        secretId: "",
        secretKey: "",
        bucket: "",
        region: "",
        host: "",
        prefixKey: "",
        secretExt: ""
        // 可选
      },
      qiniu: {
        secretId: "",
        secretKey: "",
        bucket: "",
        region: "",
        host: "",
        prefixKey: "",
        secretExt: ""
        // 可选
      },
      upyun: {
        user: "",
        password: "",
        bucket: "",
        host: "",
        prefixKey: "",
        secretExt: ""
        // 可选
      },
      github: {
        user: "",
        token: "",
        repo: "",
        branch: "",
        host: "",
        prefixKey: "",
        secretExt: ""
        // 可选
      }
    }
  },
  null,
  2
);
var genConfigFile = (configName) => {
  let str = configJsStr;
  if (!configName.endsWith(".js")) {
    str = configJson;
  }
  fs.writeFileSync(`${process.cwd()}/${configName}`, str, {
    encoding: "utf-8"
  });
};

// src/utils/gen-env-file.ts
import fs2 from "fs";
var envStr = "# \u8BED\u96C0\nYUQUE_TOKEN=\nYUQUE_LOGIN=\nYUQUE_REPO=\n\n# Notion\nNOTION_TOKEN=\nNOTION_DATABASE_ID=\n\n#FlowUs\nFLOWUS_TABLE_PAGE_ID=\n\n# Confluence\nCONFLUENCE_BASE_URL=\nCONFLUENCE_USER=\nCONFLUENCE_PASSWORD=\nCONFLUENCE_SPACE_KEY=\nCONFLUENCE_ROOT_PAGE_ID=\n\n# \u817E\u8BAF\u4E91\nCOS_SECRET_ID=\nCOS_SECRET_KEY=\nCOS_BUCKET=\nCOS_REGION=\nCOS_HOST=\n\n# \u963F\u91CC\u4E91\nOSS_SECRET_ID=\nOSS_SECRET_KEY=\nOSS_BUCKET=\nOSS_REGION=\nOSS_HOST=xxx.oss-cn-xxx.aliyuncs.com\n\n# \u4E03\u725B\u4E91\nQINIU_SECRET_ID=\nQINIU_SECRET_KEY=\nQINIU_BUCKET=\nQINIU_REGION=\nQINIU_HOST=\n\n# \u53C8\u62CD\u4E91\nUPYUN_USER=\nUPYUN_PASSWORD=\nUPYUN_BUCKET=\nUPYUN_HOST=xxx.xx.upaiyun.com\n\n# Github\nGITHUB_USER=\nGITHUB_TOKEN=\nGITHUB_REPO=\n\n";
var genEnvFile = (envName) => {
  fs2.writeFileSync(`${process.cwd()}/${envName}`, envStr, {
    encoding: "utf-8"
  });
};

// src/scripts/init.ts
var init = (configName = "elog.config.js", envName = ".elog.env") => __async(void 0, null, function* () {
  genConfigFile(configName);
  genEnvFile(envName);
  out.access("\u521D\u59CB\u5316", "\u{1F389} \u521D\u59CB\u5316\u6210\u529F \u{1F389}");
  out.info("\u4E0B\u4E00\u6B65", `\u914D\u7F6E${configName}\u548C${envName}`);
});
var init_default = init;

// src/scripts/sync.ts
import Elog from "@elog/core";
import path2 from "path";
import * as dotenv from "dotenv";
import { out as out3 } from "@elog/shared";

// src/utils/utils.ts
import fs3 from "fs";
import path from "path";

// src/const/index.ts
var configFileNames = ["elog-config.json", "elog.config.json", "elog.config.js"];
var cacheFileNames = ["elog-cache.json", "elog.cache.json"];

// src/utils/utils.ts
import { out as out2 } from "@elog/shared";
var getPkgJSON = () => {
  let pkgJson3 = { version: "1.0.0" };
  try {
    const pkgJsonPathCjs = path.resolve(__dirname, "../", "package.json");
    pkgJson3 = JSON.parse(fs3.readFileSync(pkgJsonPathCjs, "utf8"));
  } catch (e) {
    const pkgJsonPathMjs = path.resolve(__dirname, "../../", "package.json");
    pkgJson3 = JSON.parse(fs3.readFileSync(pkgJsonPathMjs, "utf8"));
  }
  return {
    pkgJson: pkgJson3
  };
};
var getConfig = (customConfigPath, customCachePath) => {
  const rootPath = process.cwd();
  const configFile = customConfigPath || configFileNames.find((name) => fs3.existsSync(path.join(rootPath, name)));
  if (!configFile) {
    out2.err("\u9519\u8BEF", "\u627E\u4E0D\u5230Elog\u914D\u7F6E\u6587\u4EF6");
    process.exit(1);
  }
  const cacheFilePath = customCachePath || cacheFileNames.find((name) => fs3.existsSync(path.join(rootPath, name))) || "elog.cache.json";
  const configFilePath = path.join(rootPath, configFile);
  const config2 = __require(configFilePath);
  return {
    config: config2,
    cacheFilePath
  };
};

// src/scripts/sync.ts
var sync = (customConfigPath, customCachePath, envPath) => __async(void 0, null, function* () {
  if (envPath) {
    envPath = path2.resolve(process.cwd(), envPath);
    out3.access("\u73AF\u5883\u53D8\u91CF", `\u5DF2\u6307\u5B9A\u8BFB\u53D6env\u6587\u4EF6\u4E3A\uFF1A${envPath}`);
    dotenv.config({ override: true, path: envPath });
  } else {
    out3.access("\u73AF\u5883\u53D8\u91CF", `\u672A\u6307\u5B9Aenv\u6587\u4EF6\uFF0C\u5C06\u4ECE\u7CFB\u7EDF\u73AF\u5883\u53D8\u91CF\u4E2D\u8BFB\u53D6`);
  }
  const { config: userConfig, cacheFilePath } = getConfig(customConfigPath, customCachePath);
  const elogConfig = __spreadProps(__spreadValues({}, userConfig), {
    extension: __spreadValues({
      cachePath: cacheFilePath
    }, userConfig.extension)
  });
  const elog = new Elog(elogConfig);
  yield elog.deploy();
});
var sync_default = sync;

// src/scripts/clean.ts
import { out as out5 } from "@elog/shared";

// src/utils/clean.ts
import rimraf from "rimraf";
import path3 from "path";
import { out as out4 } from "@elog/shared";
import * as fs4 from "fs";
var __cwd = process.cwd();
var cleanPost = (postPath) => {
  try {
    const dist = path3.join(__cwd, postPath);
    rimraf.sync(dist);
    out4.info("\u6E05\u7406\u6587\u6863", dist);
  } catch (error) {
    out4.err(`\u6E05\u7406\u6587\u6863\u5931\u8D25, ${error.message}`);
  }
};
var cleanCache = (cachePath) => {
  try {
    const dist = path3.join(__cwd, cachePath);
    fs4.unlinkSync(dist);
    out4.info("\u6E05\u7406\u7F13\u5B58", dist);
  } catch (error) {
    out4.err(`\u6E05\u7406\u7F13\u5B58\u5931\u8D25', ${error.message}`);
  }
};
var cleanImages = (imgsPath) => {
  try {
    const dist = path3.join(__cwd, imgsPath);
    rimraf.sync(dist);
    out4.info("\u6E05\u7406\u56FE\u7247", dist);
  } catch (error) {
    out4.err(`\u6E05\u7406\u56FE\u7247\u5931\u8D25, ${error.message}`);
  }
};

// src/scripts/clean.ts
var clean = (customConfigPath, customCachePath) => __async(void 0, null, function* () {
  try {
    const { config: config2, cacheFilePath } = getConfig(customConfigPath, customCachePath);
    const {
      deploy: { platform: deployPlatform, local: { outputDir: docOutputDir } } = {},
      image: { enable, platform: imagePlatform, local: { outputDir: imageOutputDir } } = {}
    } = config2;
    cleanCache(cacheFilePath);
    if (deployPlatform === "local" && docOutputDir) {
      cleanPost(docOutputDir);
    }
    if (enable && imagePlatform === "local" && imageOutputDir) {
      cleanImages(imageOutputDir);
    }
  } catch (error) {
    out5.err(`\u6E05\u7406\u5931\u8D25, ${error.message}`);
  }
});
var clean_default = clean;

// src/run.ts
import { out as out8 } from "@elog/shared";

// src/scripts/upgrade.ts
import latestVersion from "latest-version";
import inquirer from "inquirer";
import { gt } from "semver";
import { out as out7 } from "@elog/shared";

// src/utils/run.ts
import { execSync } from "child_process";
import { out as out6 } from "@elog/shared";
var runCmdSync = (command) => {
  const cwd = process.cwd();
  out6.info("\u76EE\u5F55", cwd);
  out6.info("\u6267\u884C", command);
  const output = execSync(command);
  out6.info("\u8F93\u51FA", output.toString().trim());
};

// src/scripts/upgrade.ts
var { pkgJson } = getPkgJSON();
var upgrade = () => __async(void 0, null, function* () {
  const newVersion = yield latestVersion(pkgJson.name);
  const currentVersion = pkgJson.version;
  out7.access("\u5F53\u524D\u7248\u672C", currentVersion);
  out7.access("\u6700\u65B0\u7248\u672C", newVersion);
  if (gt(newVersion, currentVersion)) {
    inquirer.prompt([
      {
        type: "confirm",
        name: "confirmed",
        message: "\u662F\u5426\u66F4\u65B0",
        default: true
      }
    ]).then((answers) => {
      const confirmed = answers.confirmed;
      if (!confirmed) {
        out7.access("\u53D6\u6D88\u66F4\u65B0");
        process.exit(0);
      } else {
        inquirer.prompt([
          {
            type: "list",
            name: "cli",
            message: "\u8BF7\u9009\u62E9\u5305\u7BA1\u7406\u5668",
            default: "npm",
            choices: [
              {
                name: "npm" /* NPM */,
                value: "npm" /* NPM */
              },
              {
                name: "pnpm" /* PNPM */,
                value: "pnpm" /* PNPM */
              },
              {
                name: "yarn" /* YARN */,
                value: "yarn" /* YARN */
              }
            ]
          }
        ]).then((answers2) => {
          const { cli } = answers2;
          if (cli === "yarn" /* YARN */) {
            runCmdSync(`yarn global add ${pkgJson.name}@${newVersion}`);
          } else {
            runCmdSync(`${cli} install ${pkgJson.name}@${newVersion} -g`);
          }
        });
      }
    });
  } else {
    out7.access("\u63D0\u793A", `\u5F53\u524D\u5DF2\u662F\u6700\u65B0\u7248\u672C: ${currentVersion}`);
    process.exit(0);
  }
});
var upgrade_default = upgrade;

// src/run.ts
var { pkgJson: pkgJson2 } = getPkgJSON();
function run() {
  return __async(this, null, function* () {
    program.version(pkgJson2.version).command("init").option("-c --config <string>", "rename config file,  default is elog.config.json").option("-e --env <string>", "rename env file, default is .elog.env").description("init config").action((options) => {
      try {
        void init_default(options.config, options.env);
      } catch (error) {
        out8.err("\u8FD0\u884C\u5931\u8D25", error.message);
        process.exit(1);
      }
    });
    program.version(pkgJson2.version).command("sync").option("-c, --config <string>", "use config with custom, default is elog.config.js").option("-a --cache <string>", "use cache file name, default is elog.cache.json").option("-e, --env <string>", "use env with custom").option("--debug", `show debug logs`).description("sync doc").action((options) => {
      try {
        void sync_default(options.config, options.cache, options.env);
      } catch (error) {
        out8.err("\u8FD0\u884C\u5931\u8D25", error.message);
        process.exit(1);
      }
    });
    program.version(pkgJson2.version).command("clean").option("-c --config <string>", "assign config file name, default is elog.config.js").option("-a --cache <string>", "assign cache file name, default is elog.cache.json").description("clean cache").action((options) => {
      try {
        void clean_default(options.config, options.cache);
      } catch (error) {
        out8.err("\u8FD0\u884C\u5931\u8D25", error.message);
        process.exit(1);
      }
    });
    program.version(pkgJson2.version).command("upgrade").description("upgrade version of @elog/cli self").action(() => {
      try {
        upgrade_default();
      } catch (error) {
        out8.err("\u66F4\u65B0\u5931\u8D25", error.message);
        process.exit(1);
      }
    });
    program.parse();
  });
}

// src/utils/config.ts
function defineConfig(config2) {
  return config2;
}

// src/index.ts
export * from "@elog/core";
export {
  defineConfig,
  run
};
//# sourceMappingURL=index.js.map