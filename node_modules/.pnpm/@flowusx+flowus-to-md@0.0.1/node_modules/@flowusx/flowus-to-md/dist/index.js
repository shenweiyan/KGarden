"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/const/flowus.ts
var BlockTypeText = {
  [0 /* Doc */]: "\u6587\u6863",
  [1 /* Text */]: "\u6B63\u6587",
  [3 /* Todo */]: "\u5F85\u529E\u5217\u8868",
  [4 /* Unordered_List */]: "\u9879\u76EE\u5217\u8868",
  [5 /* Numbered_List */]: "\u7F16\u53F7\u5217\u8868",
  [6 /* Toggle */]: "\u6298\u53E0\u5217\u8868",
  [7 /* Title */]: "\u6807\u9898",
  [9 /* Dividing */]: "\u5206\u5272\u7EBF",
  [12 /* Quote */]: "\u5F15\u8FF0\u6587\u5B57",
  [13 /* Emphasis_Text */]: "\u7740\u91CD\u6587\u5B57",
  [14 /* Media */]: "\u5A92\u4F53",
  [15 /* Embed_Folder */]: "\u6587\u4EF6\u5939",
  [16 /* Reference_Page */]: "\u5F15\u7528\u9875\u9762",
  [18 /* Data_Table */]: "\u591A\u7EF4\u8868",
  [19 /* Data_Table_Inline */]: "\u5185\u5D4C\u591A\u7EF4\u8868",
  [20 /* Embed_Webpage */]: "\u5D4C\u5165\u7F51\u9875",
  [21 /* Web_Bookmark */]: "\u7F51\u9875\u4E66\u7B7E",
  [23 /* Equation */]: "\u6570\u5B66\u516C\u5F0F",
  [25 /* Code */]: "\u4EE3\u7801\u7247\u6BB5",
  [26 /* Embed_Media */]: "\u5D4C\u5165\u5A92\u4F53",
  [27 /* Table */]: "\u8868\u683C",
  [28 /* Table_Row */]: "\u8868\u683C\u884C",
  [29 /* Reference_Data_Table */]: "\u5F15\u7528\u591A\u7EF4\u8868",
  [31 /* Sync_Block */]: "\u540C\u6B65\u5757",
  [36 /* Mind_Map */]: "\u601D\u7EF4\u5BFC\u56FE",
  [37 /* Mind_Map_Page */]: "\u5185\u5D4C\u601D\u7EF4\u5BFC\u56FE\u9875\u9762",
  [38 /* Toggle_Title */]: "\u6298\u53E0\u6807\u9898"
};

// src/utils/md.ts
var _markdowntable = require('markdown-table'); var _markdowntable2 = _interopRequireDefault(_markdowntable);
var inlineCode = (text) => {
  return `\`${text}\``;
};
var inlineEquation = (text) => {
  return `$${text}$`;
};
var bold = (text) => {
  return `**${text}**`;
};
var italic = (text) => {
  return `_${text}_`;
};
var strikethrough = (text) => {
  return `~~${text}~~`;
};
var underline = (text) => {
  return `<u>${text}</u>`;
};
var link = (text, href) => {
  return `[${text}](${href})`;
};
var codeBlock = (text, language) => {
  if (language === "plain text")
    language = "text";
  return `\`\`\`${language}
${text}
\`\`\``;
};
var equation = (text) => {
  return `$$
${text}
$$`;
};
var heading = (text, level = 1) => {
  const pound = "#".repeat(level);
  return `${pound} ${text}`;
};
var quote = (text) => {
  return `> ${text.replace(/\n/g, "  \n> ")}`;
};
var bullet = (text, count) => {
  let renderText = text.trim();
  return count ? `${count}. ${renderText}` : `- ${renderText}`;
};
var todo = (text, checked) => {
  return checked ? `- [x] ${text}` : `- [ ] ${text}`;
};
var image = (alt, href) => {
  return `![${alt}](${href})`;
};
var addTabSpace = (text, n = 0) => {
  const tab = "	";
  for (let i = 0; i < n; i++) {
    if (text.includes("\n")) {
      const multiLineText = text.split(/(?:^|\n)/).join(`
${tab}`);
      text = tab + multiLineText;
    } else
      text = tab + text;
  }
  return text;
};
var divider = () => {
  return "---";
};
var toggle = (summary, children) => {
  if (!summary)
    return children || "";
  return `
<details>
  <summary>${summary}</summary>
  ${children || ""}
</details>`;
};
var table = (cells) => {
  return _markdowntable2.default.call(void 0, cells);
};

// src/utils/flowus.ts
var _flowusshared = require('@flowusx/flowus-shared');
var _unsupported = (type) => {
  return ({ pageTitle }) => {
    _flowusshared.out.debug(`\u3010${pageTitle}\u3011\u5B58\u5728\u6682\u4E0D\u652F\u6301\u7684\u5757\u7C7B\u578B: ${BlockTypeText[type]}`);
    return "";
  };
};
var getTextValue = ({ block, pageTitle }) => {
  var _a;
  let str = "";
  (_a = block.data.segments) == null ? void 0 : _a.forEach((item) => {
    if (item.type === 0) {
      if (item.enhancer.bold) {
        str += bold(item.text);
      } else if (item.enhancer.underline) {
        str += underline(item.text);
      } else if (item.enhancer.italic) {
        str += italic(item.text);
      } else if (item.enhancer.lineThrough) {
        str += strikethrough(item.text);
      } else if (item.enhancer.code) {
        str += inlineCode(item.text);
      } else {
        str += item.text;
      }
    } else if (item.type === 8) {
      str += inlineEquation(item.text);
    } else if (item.type === 6) {
      str += item.startDate + item.startTime;
    } else if (item.type === 4) {
      _flowusshared.out.debug(`\u3010${pageTitle}\u3011\u5B58\u5728\u6682\u4E0D\u652F\u6301\u7684\u5757\u7C7B\u578B: \u884C\u5185\u9875\u9762/\u5F15\u7528\u9875\u9762`);
    } else if (item.type === 7) {
      _flowusshared.out.debug(`\u3010${pageTitle}\u3011\u5B58\u5728\u6682\u4E0D\u652F\u6301\u7684\u5757\u7C7B\u578B: \u4EBA\u5458`);
    }
  });
  return str;
};
var getTodoValue = ({ block }) => {
  return todo(block.title, block.data.checked);
};
var getUnorderedListValue = ({ block, blocks, pageTitle }) => {
  let childrenStr = "\n";
  const childrenIds = block.subNodes;
  childrenIds.forEach((id) => {
    const childBlock = blocks[id];
    childrenStr += addTabSpace(
      transform[childBlock.type]({ block: childBlock, blocks, pageTitle }),
      1
    );
  });
  return bullet(block.title) + childrenStr;
};
var getNumberedListValue = ({ block, blocks, pageTitle }) => {
  let childrenStr = "\n";
  const childrenIds = block.subNodes;
  childrenIds.forEach((id) => {
    const childBlock = blocks[id];
    childrenStr += addTabSpace(
      transform[childBlock.type]({ block: childBlock, blocks, pageTitle }),
      1
    );
  });
  return bullet(block.title, 1) + childrenStr;
};
var getToggleValue = ({ block, blocks, pageTitle }) => {
  let childrenStr = "";
  const childrenIds = block.subNodes;
  childrenIds.forEach((id) => {
    const childBlock = blocks[id];
    childrenStr += transform[childBlock.type]({ block: childBlock, blocks, pageTitle });
  });
  return toggle(block.title, childrenStr) + "\n";
};
var getTitleValue = ({ block }) => {
  return heading(block.title, block.data.level);
};
var getDividingValue = () => {
  return divider();
};
var getQuoteValue = ({ block }) => {
  return quote(block.title);
};
var getEmphasisTextValue = ({ block }) => {
  let text = block.title;
  if (block.data.icon.type === "emoji") {
    text = block.data.icon.value + " " + text;
  }
  return quote(text);
};
var getMediaValue = ({ block }) => {
  if (block.data.display === "image") {
    return image(block.title, block.data.fullLink || block.data.ossName);
  } else if (block.data.display === "video") {
    return link(block.title, block.data.fullLink || block.data.ossName);
  }
  return "";
};
var getLinkValue = ({ block }) => {
  return link(block.title || block.data.link, block.data.link);
};
var getEquationValue = ({ block }) => {
  return equation(block.title);
};
var getCodeValue = ({ block }) => {
  return codeBlock(block.title, block.data.format.language);
};
var getTableValue = ({ block, blocks }) => {
  const columns = block.data.format.tableBlockColumnOrder;
  const cells = [];
  block.subNodes.forEach((subNode) => {
    const cellString = [];
    const columnObj = blocks[subNode].data.collectionProperties;
    if (columnObj) {
      Object.keys(columnObj).forEach((columnkey) => {
        columns.forEach((column) => {
          if (columnkey === column) {
            const cell = columnObj[columnkey][0].text;
            cellString.push(cell);
          }
        });
      });
      cells.push(cellString);
    }
  });
  return "\n" + table(cells) + "\n";
};
var getSyncBlockValue = ({ block, blocks, pageTitle }) => {
  let childrenStr = "";
  const childrenIds = block.subNodes;
  childrenIds.forEach((id) => {
    const childBlock = blocks[id];
    childrenStr += transform[childBlock.type]({ block: childBlock, blocks, pageTitle }) + "\n";
  });
  return childrenStr;
};
var transform = {
  [0 /* Doc */]: _unsupported(0 /* Doc */),
  [1 /* Text */]: getTextValue,
  [3 /* Todo */]: getTodoValue,
  [4 /* Unordered_List */]: getUnorderedListValue,
  [5 /* Numbered_List */]: getNumberedListValue,
  [6 /* Toggle */]: getToggleValue,
  [7 /* Title */]: getTitleValue,
  [9 /* Dividing */]: getDividingValue,
  [12 /* Quote */]: getQuoteValue,
  [13 /* Emphasis_Text */]: getEmphasisTextValue,
  [14 /* Media */]: getMediaValue,
  [15 /* Embed_Folder */]: _unsupported(15 /* Embed_Folder */),
  [16 /* Reference_Page */]: _unsupported(16 /* Reference_Page */),
  [18 /* Data_Table */]: _unsupported(18 /* Data_Table */),
  [19 /* Data_Table_Inline */]: _unsupported(19 /* Data_Table_Inline */),
  [20 /* Embed_Webpage */]: getLinkValue,
  [21 /* Web_Bookmark */]: getLinkValue,
  [23 /* Equation */]: getEquationValue,
  [25 /* Code */]: getCodeValue,
  [26 /* Embed_Media */]: getLinkValue,
  [27 /* Table */]: getTableValue,
  [28 /* Table_Row */]: _unsupported(28 /* Table_Row */),
  [29 /* Reference_Data_Table */]: _unsupported(29 /* Reference_Data_Table */),
  [31 /* Sync_Block */]: getSyncBlockValue,
  [36 /* Mind_Map */]: _unsupported(36 /* Mind_Map */),
  [37 /* Mind_Map_Page */]: _unsupported(37 /* Mind_Map_Page */),
  [38 /* Toggle_Title */]: getToggleValue
};

// src/client.ts

var _process = require('process'); var process = _interopRequireWildcard(_process);
var FlowUsToMarkdown = class {
  constructor(options) {
    this.flowusClient = options == null ? void 0 : options.client;
    this.config = options == null ? void 0 : options.config;
    if (this.config) {
      _flowusshared.out.warning("\u6682\u4E0D\u652F\u6301\u6B64\u914D\u7F6E", JSON.stringify(this.config));
    }
  }
  pageToMarkdown(id) {
    return __async(this, null, function* () {
      if (!this.flowusClient) {
        _flowusshared.out.err("flowusClient is not provided");
        process.exit(1);
      }
      const pageBlocks = yield this.flowusClient.getPageBlocks(id);
      return this.toMarkdownString(pageBlocks);
    });
  }
  toMarkdownString(pageBlocks) {
    let mdString = "";
    const blocksKeys = Object.keys(pageBlocks.blocks);
    const firstKey = blocksKeys[0];
    const firstValue = pageBlocks.blocks[firstKey];
    if (firstValue.type === 0 /* Doc */) {
      let prevType = 0;
      const needEnter = [13 /* Emphasis_Text */, 12 /* Quote */, 1 /* Text */];
      firstValue.subNodes.forEach((blockId) => {
        const block = pageBlocks.blocks[blockId];
        const curType = block.type;
        let linefeed = "";
        if (needEnter.includes(prevType) && needEnter.includes(curType)) {
          linefeed += "\n";
        }
        if (!transform[curType]) {
          _flowusshared.out.debug(`\u6682\u4E0D\u652F\u6301\u7684\u5757\u7C7B\u578B: ${curType}-${block.title}`);
        } else {
          mdString += linefeed + transform[curType]({ block, blocks: pageBlocks.blocks, pageTitle: firstValue.title }) + "\n";
          prevType = curType;
        }
      });
    } else {
      _flowusshared.out.err("\u7C7B\u578B\u9519\u8BEF", "\u975E\u6587\u6863\u7C7B\u578B");
      process.exit(1);
    }
    return mdString;
  }
};


exports.FlowUsToMarkdown = FlowUsToMarkdown;
//# sourceMappingURL=index.js.map