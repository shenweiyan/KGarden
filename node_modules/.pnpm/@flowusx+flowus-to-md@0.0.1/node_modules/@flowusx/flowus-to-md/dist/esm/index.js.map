{"version":3,"sources":["../../src/const/flowus.ts","../../src/utils/md.ts","../../src/utils/flowus.ts","../../src/client.ts"],"sourcesContent":["export const enum BlockType {\n  // 文档\n  Doc = 0,\n  Text = 1,\n  Todo = 3,\n  // 无序标签\n  Unordered_List = 4,\n  // 有序标签\n  Numbered_List = 5,\n  // 折叠列表\n  Toggle = 6,\n  // 标题\n  Title = 7, // title有level\n  // 分割线\n  Dividing = 9,\n  // 引用\n  Quote = 12,\n  // 着重文字\n  Emphasis_Text = 13,\n  // 图片\n  Media = 14,\n  // 内嵌文件夹\n  Embed_Folder = 15,\n  // 引用页面\n  Reference_Page = 16,\n  // 数据表格\n  Data_Table = 18,\n  // 内嵌数据表格\n  Data_Table_Inline = 19,\n  // 内嵌网页\n  Embed_Webpage = 20,\n  // 网页书签\n  Web_Bookmark = 21,\n  // 公式\n  Equation = 23,\n  // 代码块\n  Code = 25,\n  // 内嵌媒体\n  Embed_Media = 26,\n  // 表格\n  Table = 27,\n  // 表格行（包含表格标题）\n  Table_Row = 28,\n  // 引用多维表\n  Reference_Data_Table = 29,\n  // 同步块\n  Sync_Block = 31,\n  // 思维导图\n  Mind_Map = 36,\n  // 内嵌思维导图页面\n  Mind_Map_Page = 37,\n  // 折叠标题\n  Toggle_Title = 38,\n}\n\nexport const BlockTypeText = {\n  [BlockType.Doc]: '文档',\n  [BlockType.Text]: '正文',\n  [BlockType.Todo]: '待办列表',\n  [BlockType.Unordered_List]: '项目列表',\n  [BlockType.Numbered_List]: '编号列表',\n  [BlockType.Toggle]: '折叠列表',\n  [BlockType.Title]: '标题',\n  [BlockType.Dividing]: '分割线',\n  [BlockType.Quote]: '引述文字',\n  [BlockType.Emphasis_Text]: '着重文字',\n  [BlockType.Media]: '媒体',\n  [BlockType.Embed_Folder]: '文件夹',\n  [BlockType.Reference_Page]: '引用页面',\n  [BlockType.Data_Table]: '多维表',\n  [BlockType.Data_Table_Inline]: '内嵌多维表',\n  [BlockType.Embed_Webpage]: '嵌入网页',\n  [BlockType.Web_Bookmark]: '网页书签',\n  [BlockType.Equation]: '数学公式',\n  [BlockType.Code]: '代码片段',\n  [BlockType.Embed_Media]: '嵌入媒体',\n  [BlockType.Table]: '表格',\n  [BlockType.Table_Row]: '表格行',\n  [BlockType.Reference_Data_Table]: '引用多维表',\n  [BlockType.Sync_Block]: '同步块',\n  [BlockType.Mind_Map]: '思维导图',\n  [BlockType.Mind_Map_Page]: '内嵌思维导图页面',\n  [BlockType.Toggle_Title]: '折叠标题',\n}\n","import markdownTable from 'markdown-table'\n\nexport const inlineCode = (text: string) => {\n  return `\\`${text}\\``\n}\n\nexport const inlineEquation = (text: string) => {\n  return `$${text}$`\n}\n\nexport const bold = (text: string) => {\n  return `**${text}**`\n}\n\nexport const italic = (text: string) => {\n  return `_${text}_`\n}\n\nexport const strikethrough = (text: string) => {\n  return `~~${text}~~`\n}\n\nexport const underline = (text: string) => {\n  return `<u>${text}</u>`\n}\n\nexport const link = (text: string, href: string) => {\n  return `[${text}](${href})`\n}\n\nexport const codeBlock = (text: string, language?: string) => {\n  if (language === 'plain text') language = 'text'\n\n  return `\\`\\`\\`${language}\n${text}\n\\`\\`\\``\n}\n\nexport const equation = (text: string) => {\n  return `$$\n${text}\n$$`\n}\n\nexport const heading = (text: string, level = 1) => {\n  const pound = '#'.repeat(level)\n  return `${pound} ${text}`\n}\n\nexport const quote = (text: string) => {\n  // the replace is done to handle multiple lines\n  return `> ${text.replace(/\\n/g, '  \\n> ')}`\n}\n\nexport const callout = (text: string, icon?: any) => {\n  let emoji: string | undefined\n  if (icon?.type === 'emoji') {\n    emoji = icon.emoji\n  }\n\n  // the replace is done to handle multiple lines\n  return `> ${emoji ? emoji + ' ' : ''}${text.replace(/\\n/g, '  \\n> ')}`\n}\n\nexport const bullet = (text: string, count?: number) => {\n  let renderText = text.trim()\n  return count ? `${count}. ${renderText}` : `- ${renderText}`\n}\n\nexport const todo = (text: string, checked: boolean) => {\n  return checked ? `- [x] ${text}` : `- [ ] ${text}`\n}\n\nexport const image = (alt: string, href: string) => {\n  return `![${alt}](${href})`\n}\n\nexport const addTabSpace = (text: string, n = 0) => {\n  const tab = '\t'\n  for (let i = 0; i < n; i++) {\n    if (text.includes('\\n')) {\n      const multiLineText = text.split(/(?:^|\\n)/).join(`\\n${tab}`)\n      text = tab + multiLineText\n    } else text = tab + text\n  }\n  return text\n}\n\nexport const divider = () => {\n  return '---'\n}\n\nexport const toggle = (summary?: string, children?: string) => {\n  if (!summary) return children || ''\n  return `\n<details>\n  <summary>${summary}</summary>\n  ${children || ''}\n</details>`\n}\n\nexport const table = (cells: string[][]) => {\n  return markdownTable(cells)\n}\n","import { BlockType, BlockTypeText } from '../const/flowus'\n\nimport {\n  addTabSpace,\n  bold,\n  bullet,\n  codeBlock,\n  divider,\n  equation,\n  heading,\n  image,\n  inlineCode,\n  inlineEquation,\n  italic,\n  link,\n  quote,\n  strikethrough,\n  table,\n  todo,\n  toggle,\n  underline,\n} from './md'\nimport { Transform, TransformPrams } from '../types'\nimport { out } from '@flowusx/flowus-shared'\n\nexport const _unsupported = (type: BlockType) => {\n  return ({ pageTitle }: TransformPrams) => {\n    out.debug(`【${pageTitle}】存在暂不支持的块类型: ${BlockTypeText[type]}`)\n    return ''\n  }\n}\n\n/**\n * 文字\n * @param block\n * @param pageTitle\n */\nexport const getTextValue = ({ block, pageTitle }: TransformPrams) => {\n  let str = ''\n  block.data.segments?.forEach((item) => {\n    if (item.type === 0) {\n      // 文字\n      if (item.enhancer.bold) {\n        // 加粗\n        str += bold(item.text)\n      } else if (item.enhancer.underline) {\n        // 下划线\n        str += underline(item.text)\n      } else if (item.enhancer.italic) {\n        // 斜体\n        str += italic(item.text)\n      } else if (item.enhancer.lineThrough) {\n        // 删除线\n        str += strikethrough(item.text)\n      } else if (item.enhancer.code) {\n        // 行内代码\n        str += inlineCode(item.text)\n      } else {\n        str += item.text\n      }\n    } else if (item.type === 8) {\n      // 行内公式\n      str += inlineEquation(item.text)\n    } else if (item.type === 6) {\n      // 日期\n      str += item.startDate + item.startTime\n    } else if (item.type === 4) {\n      // 行内引用页面/行内页面\n      out.debug(`【${pageTitle}】存在暂不支持的块类型: 行内页面/引用页面`)\n    } else if (item.type === 7) {\n      // 人员\n      out.debug(`【${pageTitle}】存在暂不支持的块类型: 人员`)\n    }\n  })\n  return str\n}\n\n/**\n * 待办事项\n * @param block\n */\nexport const getTodoValue = ({ block }: TransformPrams) => {\n  return todo(block.title, block.data.checked)\n}\n\n/**\n * 无序列表\n * @param block\n * @param blocks\n * @param pageTitle\n */\nexport const getUnorderedListValue = ({ block, blocks, pageTitle }: TransformPrams) => {\n  let childrenStr = '\\n'\n  const childrenIds = block.subNodes\n  childrenIds.forEach((id) => {\n    const childBlock = blocks[id]\n    childrenStr += addTabSpace(\n      transform[childBlock.type as BlockType]({ block: childBlock, blocks, pageTitle }),\n      1,\n    )\n  })\n  return bullet(block.title) + childrenStr\n}\n\n/**\n * 有序列表\n * @param block\n * @param blocks\n * @param pageTitle\n */\nexport const getNumberedListValue = ({ block, blocks, pageTitle }: TransformPrams) => {\n  let childrenStr = '\\n'\n  const childrenIds = block.subNodes\n  childrenIds.forEach((id) => {\n    const childBlock = blocks[id]\n    childrenStr += addTabSpace(\n      transform[childBlock.type as BlockType]({ block: childBlock, blocks, pageTitle }),\n      1,\n    )\n  })\n  return bullet(block.title, 1) + childrenStr\n}\n\n/**\n * 折叠\n * @param block\n * @param blocks\n * @param pageTitle\n */\nexport const getToggleValue = ({ block, blocks, pageTitle }: TransformPrams) => {\n  let childrenStr = ''\n  const childrenIds = block.subNodes\n  childrenIds.forEach((id) => {\n    const childBlock = blocks[id]\n    childrenStr += transform[childBlock.type as BlockType]({ block: childBlock, blocks, pageTitle })\n  })\n  return toggle(block.title, childrenStr) + '\\n'\n}\n\n/**\n * 标题\n * @param block\n */\nexport const getTitleValue = ({ block }: TransformPrams) => {\n  return heading(block.title, block.data.level)\n}\n\n/**\n * 分割线\n */\nexport const getDividingValue = () => {\n  return divider()\n}\n\n/**\n * 引用\n * @param block\n */\nexport const getQuoteValue = ({ block }: TransformPrams) => {\n  return quote(block.title)\n}\n\n/**\n * 着重文字\n * @param block\n */\nexport const getEmphasisTextValue = ({ block }: TransformPrams) => {\n  let text = block.title\n  if (block.data.icon.type === 'emoji') {\n    text = block.data.icon.value + ' ' + text\n  }\n  return quote(text)\n}\n\n/**\n * 媒体\n * @param block\n */\nexport const getMediaValue = ({ block }: TransformPrams) => {\n  if (block.data.display === 'image') {\n    return image(block.title, block.data.fullLink || block.data.ossName)\n  } else if (block.data.display === 'video') {\n    return link(block.title, block.data.fullLink || block.data.ossName)\n  }\n  return ''\n}\n\n/**\n * 链接\n * @param block\n */\nexport const getLinkValue = ({ block }: TransformPrams) => {\n  return link(block.title || block.data.link, block.data.link)\n}\n\n/**\n * 公式\n * @param block\n */\nexport const getEquationValue = ({ block }: TransformPrams) => {\n  return equation(block.title)\n}\n\n/**\n * 代码块\n * @param block\n */\nexport const getCodeValue = ({ block }: TransformPrams) => {\n  return codeBlock(block.title, block.data.format.language)\n}\n\n/**\n * 表格\n * @param block\n * @param blocks\n */\nexport const getTableValue = ({ block, blocks }: TransformPrams) => {\n  // 找到table，然后找到行，然后按照行来渲染\n  // 列顺序items\n  const columns = block.data.format.tableBlockColumnOrder\n  // 二维行数组\n  const cells: string[][] = []\n  block.subNodes.forEach((subNode) => {\n    // 行数组\n    const cellString: string[] = []\n    const columnObj = blocks[subNode].data.collectionProperties!\n    if (columnObj) {\n      Object.keys(columnObj).forEach((columnkey) => {\n        columns.forEach((column) => {\n          if (columnkey === column) {\n            const cell = columnObj[columnkey][0].text!\n            cellString.push(cell)\n          }\n        })\n      })\n      // 生成二维行数组\n      cells.push(cellString)\n    }\n  })\n  // 转Table\n  return '\\n' + table(cells) + '\\n'\n}\n\n/**\n * 同步块\n * @param block\n * @param blocks\n * @param pageTitle\n */\nexport const getSyncBlockValue = ({ block, blocks, pageTitle }: TransformPrams) => {\n  let childrenStr = ''\n  const childrenIds = block.subNodes\n  childrenIds.forEach((id) => {\n    const childBlock = blocks[id]\n    childrenStr +=\n      transform[childBlock.type as BlockType]({ block: childBlock, blocks, pageTitle }) + '\\n'\n  })\n  return childrenStr\n}\n\nexport const transform: Transform = {\n  [BlockType.Doc]: _unsupported(BlockType.Doc),\n  [BlockType.Text]: getTextValue,\n  [BlockType.Todo]: getTodoValue,\n  [BlockType.Unordered_List]: getUnorderedListValue,\n  [BlockType.Numbered_List]: getNumberedListValue,\n  [BlockType.Toggle]: getToggleValue,\n  [BlockType.Title]: getTitleValue,\n  [BlockType.Dividing]: getDividingValue,\n  [BlockType.Quote]: getQuoteValue,\n  [BlockType.Emphasis_Text]: getEmphasisTextValue,\n  [BlockType.Media]: getMediaValue,\n  [BlockType.Embed_Folder]: _unsupported(BlockType.Embed_Folder),\n  [BlockType.Reference_Page]: _unsupported(BlockType.Reference_Page),\n  [BlockType.Data_Table]: _unsupported(BlockType.Data_Table),\n  [BlockType.Data_Table_Inline]: _unsupported(BlockType.Data_Table_Inline),\n  [BlockType.Embed_Webpage]: getLinkValue,\n  [BlockType.Web_Bookmark]: getLinkValue,\n  [BlockType.Equation]: getEquationValue,\n  [BlockType.Code]: getCodeValue,\n  [BlockType.Embed_Media]: getLinkValue,\n  [BlockType.Table]: getTableValue,\n  [BlockType.Table_Row]: _unsupported(BlockType.Table_Row),\n  [BlockType.Reference_Data_Table]: _unsupported(BlockType.Reference_Data_Table),\n  [BlockType.Sync_Block]: getSyncBlockValue,\n  [BlockType.Mind_Map]: _unsupported(BlockType.Mind_Map),\n  [BlockType.Mind_Map_Page]: _unsupported(BlockType.Mind_Map_Page),\n  [BlockType.Toggle_Title]: getToggleValue,\n}\n","import { PageBlocks } from '@flowusx/flowus-types'\nimport { transform } from './utils/flowus'\nimport { BlockType } from './const/flowus'\nimport { ConfigOptions, FlowUsToMarkdownOptions } from './types'\nimport { FlowUsClient } from '@flowusx/flowus-client'\nimport { out } from '@flowusx/flowus-shared'\nimport * as process from 'process'\n\n/**\n * FlowUs文档转Md\n */\nexport class FlowUsToMarkdown {\n  private readonly flowusClient?: FlowUsClient\n  private readonly config?: ConfigOptions\n\n  constructor(options?: FlowUsToMarkdownOptions) {\n    this.flowusClient = options?.client\n    this.config = options?.config\n    if (this.config) {\n      out.warning('暂不支持此配置', JSON.stringify(this.config))\n    }\n  }\n\n  public async pageToMarkdown(id: string) {\n    if (!this.flowusClient) {\n      out.err('flowusClient is not provided')\n      process.exit(1)\n    }\n    const pageBlocks = await this.flowusClient.getPageBlocks(id)\n    return this.toMarkdownString(pageBlocks)\n  }\n\n  public toMarkdownString(pageBlocks: PageBlocks): string {\n    let mdString = ''\n    // 判断是是否是文档页面\n    const blocksKeys = Object.keys(pageBlocks.blocks)\n    // 第一个节点标记了该Block的属性是文档还是其他\n    const firstKey = blocksKeys[0]\n    const firstValue = pageBlocks.blocks[firstKey]\n    if (firstValue.type === BlockType.Doc) {\n      let prevType = 0\n      const needEnter = [BlockType.Emphasis_Text, BlockType.Quote, BlockType.Text]\n\n      firstValue.subNodes.forEach((blockId) => {\n        const block = pageBlocks.blocks[blockId]\n        const curType = block.type as BlockType\n        let linefeed = ''\n        // 特殊处理一些md语法的粘连性，需要额外加换行\n        if (needEnter.includes(prevType) && needEnter.includes(curType)) {\n          linefeed += '\\n'\n        }\n        if (!transform[curType]) {\n          out.debug(`暂不支持的块类型: ${curType}-${block.title}`)\n        } else {\n          mdString +=\n            linefeed +\n            transform[curType]({ block, blocks: pageBlocks.blocks, pageTitle: firstValue.title }) +\n            '\\n'\n          prevType = curType\n        }\n      })\n    } else {\n      // 非页面Block，退出转换\n      out.err('类型错误', '非文档类型')\n      process.exit(1)\n    }\n    return mdString\n  }\n}\n"],"mappings":"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","names":["out","out"]}