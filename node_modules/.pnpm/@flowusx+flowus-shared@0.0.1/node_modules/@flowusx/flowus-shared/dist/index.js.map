{"version":3,"sources":["../src/out.ts","../src/const/out.ts","../src/request.ts","../src/index.ts","../src/const/flowus.ts"],"names":["process","HttpClientResponse","RequestOptions","BlockType"],"mappings":"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","sourcesContent":["import * as shell from 'shelljs'\nimport chalk, { Chalk } from 'chalk'\nimport { chunk } from 'lodash'\nimport { LogLevel, __columns } from './const/out'\nimport process from 'process'\n\n/**\n * 辅助输出过程日志\n *\n * @export\n * @param {LogLevel} level\n * @param {string} head\n * @param {string} [content]\n */\nexport function println(level: LogLevel, head: string, content?: string) {\n  const color: Record<LogLevel, Chalk> = {\n    [LogLevel.ACCESS]: chalk.blue,\n    [LogLevel.INFO]: chalk.green,\n    [LogLevel.WARNING]: chalk.yellow,\n    [LogLevel.ERROR]: chalk.red,\n    [LogLevel.DEBUG]: chalk.magenta,\n  }\n\n  const MIN_HEAD_LENGTH = 10\n  const emptyHead = head.replace(/[\\u4e00-\\u9fa5]/g, 'aa')\n\n  const headLength = Math.max(emptyHead.length + 2, MIN_HEAD_LENGTH)\n  const fillLength = Math.max(MIN_HEAD_LENGTH - emptyHead.length, 0)\n\n  if (!content) {\n    shell.echo(color[level](head))\n    return\n  }\n\n  if (content && typeof content !== 'string') {\n    shell.echo(color[level](head))\n    shell.echo(content)\n    return\n  }\n\n  ;(content ?? '')\n    .replace('/\\r\\n/g', '\\n')\n    .split('\\n')\n    .map((c) => chunk(c, __columns - headLength).map((str) => str.join('')))\n    .reduce((r, c) => r.concat(c))\n    .forEach((str, i) => {\n      const _head = i ? ' '.repeat(headLength) : color[level](`${head}${' '.repeat(fillLength)}`)\n      shell.echo(_head + str)\n    })\n}\n\nconst out = {\n  access(head: string, content?: string) {\n    println(LogLevel.ACCESS, head, content)\n  },\n  info(head: string, content?: string) {\n    println(LogLevel.INFO, head, content)\n  },\n  warning(head: string, content?: string) {\n    println(LogLevel.WARNING, head, content)\n  },\n  err(head: string, content?: string) {\n    println(LogLevel.ERROR, head, content)\n  },\n  debug(head: string, content?: string) {\n    process.env.DEBUG && println(LogLevel.DEBUG, head, content)\n  },\n}\n\nexport default out\n","export const __columns = process?.stdout?.columns ?? 120\n\nexport enum LogLevel {\n  ACCESS,\n  INFO,\n  WARNING,\n  ERROR,\n  DEBUG,\n}\n","import { HttpClientResponse, request as req, RequestOptions } from 'urllib'\nimport out from './out'\n\n/**\n * 网络请求封装\n * @param url\n * @param reqOpts\n */\nexport const request = async <T>(\n  url: string,\n  reqOpts?: RequestOptions,\n): Promise<HttpClientResponse<{ code: number; data: T }>> => {\n  const opts: RequestOptions = {\n    contentType: 'json',\n    dataType: 'json',\n    headers: {\n      'User-Agent': 'FlowUs X',\n      authority: 'flowus.cn',\n      app_version_name: '1.51.0',\n      ...reqOpts?.headers,\n    },\n    compressed: true,\n    // 超时时间 60s\n    timeout: Number(process.env.REQUEST_TIMEOUT) || 60000,\n    ...reqOpts,\n  }\n  out.debug('API请求', JSON.stringify(opts))\n  return req(url, opts)\n}\n","import out from './out'\nimport { request } from './request'\nimport { HttpClientResponse, RequestOptions } from 'urllib'\nexport * from './const/flowus'\n\nexport { out, request, RequestOptions, HttpClientResponse }\n","export const enum BlockType {\n  // 文档\n  Doc = 0,\n  Text = 1,\n  Todo = 3,\n  // 无序标签\n  Unordered_List = 4,\n  // 有序标签\n  Numbered_List = 5,\n  // 折叠列表\n  Toggle = 6,\n  // 标题\n  Title = 7, // title有level\n  // 分割线\n  Dividing = 9,\n  // 引用\n  Quote = 12,\n  // 着重文字\n  Emphasis_Text = 13,\n  // 媒体\n  Media = 14,\n  // 内嵌文件夹\n  Embed_Folder = 15,\n  // 引用页面\n  Reference_Page = 16,\n  // 数据表格\n  Data_Table = 18,\n  // 内嵌数据表格\n  Data_Table_Inline = 19,\n  // 内嵌网页\n  Embed_Webpage = 20,\n  // 网页书签\n  Web_Bookmark = 21,\n  // 公式\n  Equation = 23,\n  // 代码块\n  Code = 25,\n  // 内嵌媒体\n  Embed_Media = 26,\n  // 表格\n  Table = 27,\n  // 表格行（包含表格标题）\n  Table_Row = 28,\n  // 引用多维表\n  Reference_Data_Table = 29,\n  // 同步块\n  Sync_Block = 31,\n  // 引用多维表页面\n  Reference_Data_Table_Page = 33,\n  // 思维导图\n  Mind_Map = 36,\n  // 内嵌思维导图页面\n  Mind_Map_Inline = 37,\n  // 折叠标题\n  Toggle_Title = 38,\n}\n\nexport const BlockTypeText = {\n  [BlockType.Doc]: '文档',\n  [BlockType.Text]: '正文',\n  [BlockType.Todo]: '待办列表',\n  [BlockType.Unordered_List]: '项目列表',\n  [BlockType.Numbered_List]: '编号列表',\n  [BlockType.Toggle]: '折叠列表',\n  [BlockType.Title]: '标题',\n  [BlockType.Dividing]: '分割线',\n  [BlockType.Quote]: '引述文字',\n  [BlockType.Emphasis_Text]: '着重文字',\n  [BlockType.Media]: '媒体',\n  [BlockType.Embed_Folder]: '文件夹',\n  [BlockType.Reference_Page]: '引用页面',\n  [BlockType.Data_Table]: '多维表',\n  [BlockType.Data_Table_Inline]: '内嵌多维表',\n  [BlockType.Embed_Webpage]: '嵌入网页',\n  [BlockType.Web_Bookmark]: '网页书签',\n  [BlockType.Equation]: '数学公式',\n  [BlockType.Code]: '代码片段',\n  [BlockType.Embed_Media]: '嵌入媒体',\n  [BlockType.Table]: '表格',\n  [BlockType.Table_Row]: '表格行',\n  [BlockType.Reference_Data_Table]: '引用多维表',\n  [BlockType.Mind_Map]: '思维导图',\n  [BlockType.Mind_Map_Inline]: '内嵌思维导图页面',\n  [BlockType.Toggle_Title]: '折叠标题',\n}\n"]}