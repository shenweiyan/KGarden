var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
import { out, request } from "@flowusx/flowus-shared";
import process from "process";
var FlowUsClient = class {
  constructor(config) {
    this._baseUrl = (config == null ? void 0 : config.baseUrl) || "https://flowus.cn/api";
  }
  /**
   * 获取页面所有Block
   * @param pageId
   */
  getPageBlocks(pageId) {
    return __async(this, null, function* () {
      const pageBlocks = yield this._fetch(`docs/${pageId}`, { method: "GET" });
      pageBlocks.blocks = yield this.getOssUrl(pageBlocks.blocks);
      return pageBlocks;
    });
  }
  /**
   * 获取数据表格文档列表
   * @param pageId
   */
  getDataTableData(pageId) {
    return __async(this, null, function* () {
      const pageBlocks = yield this._fetch(`docs/${pageId}`, { method: "GET" });
      const blocksKeys = Object.keys(pageBlocks.blocks);
      const firstKey = blocksKeys[0];
      const firstValue = pageBlocks.blocks[firstKey];
      if (firstValue.type === 18) {
        return pageBlocks;
      } else if (firstValue.type === 0) {
        out.err("\u7C7B\u578B\u9519\u8BEF", "\u8BF7\u4F7F\u7528 getPageBlocks \u83B7\u53D6\u9875\u9762\u6570\u636E");
      } else {
        out.err("\u7C7B\u578B\u9519\u8BEF", "\u6682\u4E0D\u652F\u6301\u7684\u6587\u6863\u7C7B\u578B");
      }
      process.exit(-1);
    });
  }
  _fetch(endpoint, reqOpts) {
    return __async(this, null, function* () {
      const url = `${this._baseUrl}/${endpoint}`;
      const res = yield request(url, reqOpts);
      return res.data.data;
    });
  }
  getOssUrl(blocks) {
    return __async(this, null, function* () {
      const mediaBlocks = [];
      Object.keys(blocks).forEach((blockId) => {
        const block = blocks[blockId];
        if (block.type === 14) {
          mediaBlocks.push({
            blockId: block.uuid,
            ossName: block.data.ossName
          });
        }
      });
      const data = {
        batch: mediaBlocks
      };
      let medias = yield this._fetch("file/create_urls", { data, method: "POST" });
      medias = medias.map((item, index) => {
        return __spreadProps(__spreadValues({}, item), {
          blockId: mediaBlocks[index].blockId
        });
      });
      medias.forEach((media) => {
        const blockId = media.blockId;
        blocks[blockId].data.fullLink = media.url;
      });
      return blocks;
    });
  }
};
export {
  FlowUsClient
};
//# sourceMappingURL=index.js.map