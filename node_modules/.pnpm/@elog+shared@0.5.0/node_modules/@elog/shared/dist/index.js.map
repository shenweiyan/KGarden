{"version":3,"sources":["../src/out.ts","../src/const.ts","../src/request.ts","../src/index.ts"],"names":["process","_a","HttpClientResponse","RequestOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAY,WAAW;AACvB,OAAO,WAAsB;AAC7B,SAAS,aAAa;;;ACDf,IAAM,QAAQ,QAAQ,IAAI;AADjC;AAEO,IAAM,aAAY,8CAAS,WAAT,mBAAiB,YAAjB,YAA4B;;;ADErD,YAAYA,cAAa;AAUlB,SAAS,QAAQ,OAAiB,MAAc,SAAkB;AACvE,QAAM,QAAiC;AAAA,IACrC,eAAgB,GAAG,MAAM;AAAA,IACzB,aAAc,GAAG,MAAM;AAAA,IACvB,gBAAiB,GAAG,MAAM;AAAA,IAC1B,cAAe,GAAG,MAAM;AAAA,IACxB,cAAe,GAAG,MAAM;AAAA,EAC1B;AAEA,QAAM,kBAAkB;AACxB,QAAM,YAAY,KAAK,QAAQ,oBAAoB,IAAI;AAEvD,QAAM,aAAa,KAAK,IAAI,UAAU,SAAS,GAAG,eAAe;AACjE,QAAM,aAAa,KAAK,IAAI,kBAAkB,UAAU,QAAQ,CAAC;AAEjE,MAAI,CAAC,SAAS;AACZ,IAAM,WAAK,MAAM,KAAK,EAAE,IAAI,CAAC;AAC7B;AAAA,EACF;AAEA,MAAI,WAAW,OAAO,YAAY,UAAU;AAC1C,IAAM,WAAK,MAAM,KAAK,EAAE,IAAI,CAAC;AAC7B,IAAM,WAAK,OAAO;AAClB;AAAA,EACF;AAEA;AAAC,GAAC,4BAAW,IACV,QAAQ,WAAW,IAAI,EACvB,MAAM,IAAI,EACV,IAAI,CAAC,MAAM,MAAM,GAAG,YAAY,UAAU,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK,EAAE,CAAC,CAAC,EACtE,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,CAAC,EAC5B,QAAQ,CAAC,KAAK,MAAM;AACnB,UAAM,QAAQ,IAAI,IAAI,OAAO,UAAU,IAAI,MAAM,KAAK,EAAE,GAAG,OAAO,IAAI,OAAO,UAAU,GAAG;AAC1F,IAAM,WAAK,QAAQ,GAAG;AAAA,EACxB,CAAC;AACL;AAEA,IAAM,MAAM;AAAA,EACV,OAAO,MAAc,SAAkB;AACrC,4BAAyB,MAAM,OAAO;AAAA,EACxC;AAAA,EACA,KAAK,MAAc,SAAkB;AACnC,0BAAuB,MAAM,OAAO;AAAA,EACtC;AAAA,EACA,QAAQ,MAAc,SAAkB;AACtC,6BAA0B,MAAM,OAAO;AAAA,EACzC;AAAA,EACA,IAAI,MAAc,SAAkB;AAClC,2BAAwB,MAAM,OAAO;AAAA,EACvC;AAAA,EACA,MAAM,MAAc,SAAkB;AACpC,IAAQ,aAAI,SAAS,uBAAwB,MAAM,OAAO;AAAA,EAC5D;AACF;AAEA,IAAO,cAAQ;;;AErEf,SAA6B,WAAW,WAA2B;AAQ5D,IAAM,UAAU,CACrB,KACA,YACmC;AAXrC,MAAAC;AAYE,QAAM,OAAuB;AAAA,IAC3B,aAAa;AAAA,IACb,UAAU;AAAA,IACV,SAAS;AAAA,MACP,cAAc;AAAA,OACX,mCAAS;AAAA,IAEd,MAAM;AAAA;AAAA,IAEN,oBAAoB,CAAC,QAAQ,IAAI;AAAA,IACjC,aAAa,CAAC,CAAC,QAAQ,IAAI;AAAA,IAC3B,OAAO,QAAQ,IAAI;AAAA;AAAA,IAEnB,SAAS,SAAOA,MAAA,QAAQ,QAAR,gBAAAA,IAAa,oBAAmB,GAAK,KAAK;AAAA,KACvD;AAEL,cAAI,MAAM,mBAAS,KAAK,UAAU,IAAI,CAAC;AACvC,SAAO,IAAI,KAAK,IAAI;AACtB;;;AC5BA,SAAS,sBAAAC,qBAAoB,kBAAAC,uBAAsB","sourcesContent":["import * as shell from 'shelljs'\nimport chalk, { Chalk } from 'chalk'\nimport { chunk } from 'lodash'\nimport { LogLevel, __columns } from './const'\nimport * as process from 'process'\n\n/**\n * 辅助输出过程日志\n *\n * @export\n * @param {LogLevel} level\n * @param {string} head\n * @param {string} [content]\n */\nexport function println(level: LogLevel, head: string, content?: string) {\n  const color: Record<LogLevel, Chalk> = {\n    [LogLevel.ACCESS]: chalk.blue,\n    [LogLevel.INFO]: chalk.green,\n    [LogLevel.WARNING]: chalk.yellow,\n    [LogLevel.ERROR]: chalk.red,\n    [LogLevel.DEBUG]: chalk.magenta,\n  }\n\n  const MIN_HEAD_LENGTH = 10\n  const emptyHead = head.replace(/[\\u4e00-\\u9fa5]/g, 'aa')\n\n  const headLength = Math.max(emptyHead.length + 2, MIN_HEAD_LENGTH)\n  const fillLength = Math.max(MIN_HEAD_LENGTH - emptyHead.length, 0)\n\n  if (!content) {\n    shell.echo(color[level](head))\n    return\n  }\n\n  if (content && typeof content !== 'string') {\n    shell.echo(color[level](head))\n    shell.echo(content)\n    return\n  }\n\n  ;(content ?? '')\n    .replace('/\\r\\n/g', '\\n')\n    .split('\\n')\n    .map((c) => chunk(c, __columns - headLength).map((str) => str.join('')))\n    .reduce((r, c) => r.concat(c))\n    .forEach((str, i) => {\n      const _head = i ? ' '.repeat(headLength) : color[level](`${head}${' '.repeat(fillLength)}`)\n      shell.echo(_head + str)\n    })\n}\n\nconst out = {\n  access(head: string, content?: string) {\n    println(LogLevel.ACCESS, head, content)\n  },\n  info(head: string, content?: string) {\n    println(LogLevel.INFO, head, content)\n  },\n  warning(head: string, content?: string) {\n    println(LogLevel.WARNING, head, content)\n  },\n  err(head: string, content?: string) {\n    println(LogLevel.ERROR, head, content)\n  },\n  debug(head: string, content?: string) {\n    process.env.DEBUG && println(LogLevel.DEBUG, head, content)\n  },\n}\n\nexport default out\n","/** 当前命令执行目录 */\nexport const __cwd = process.cwd()\nexport const __columns = process?.stdout?.columns ?? 120\n\nexport enum LogLevel {\n  ACCESS,\n  INFO,\n  WARNING,\n  ERROR,\n  DEBUG,\n}\n","import { HttpClientResponse, request as req, RequestOptions } from 'urllib'\nimport out from './out'\n\n/**\n * 网络请求封装\n * @param url\n * @param reqOpts\n */\nexport const request = async <T>(\n  url: string,\n  reqOpts?: RequestOptions,\n): Promise<HttpClientResponse<T>> => {\n  const opts: RequestOptions = {\n    contentType: 'json',\n    dataType: 'json',\n    headers: {\n      'User-Agent': 'Elog',\n      ...reqOpts?.headers,\n    },\n    gzip: true,\n    // proxy\n    rejectUnauthorized: !process.env.http_proxy,\n    enableProxy: !!process.env.http_proxy,\n    proxy: process.env.http_proxy,\n    // 超时时间 60s\n    timeout: Number(process.env?.REQUEST_TIMEOUT || 60000) || 60000,\n    ...reqOpts,\n  }\n  out.debug('API请求', JSON.stringify(opts))\n  return req(url, opts)\n}\n","import out from './out'\nimport { request } from './request'\nimport { HttpClientResponse, RequestOptions } from 'urllib'\n\nexport { out, request, RequestOptions, HttpClientResponse }\n"]}