var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/out.ts
import * as shell from "shelljs";
import chalk from "chalk";
import { chunk } from "lodash";

// src/const.ts
var __cwd = process.cwd();
var _a, _b;
var __columns = (_b = (_a = process == null ? void 0 : process.stdout) == null ? void 0 : _a.columns) != null ? _b : 120;

// src/out.ts
import * as process2 from "process";
function println(level, head, content) {
  const color = {
    [0 /* ACCESS */]: chalk.blue,
    [1 /* INFO */]: chalk.green,
    [2 /* WARNING */]: chalk.yellow,
    [3 /* ERROR */]: chalk.red,
    [4 /* DEBUG */]: chalk.magenta
  };
  const MIN_HEAD_LENGTH = 10;
  const emptyHead = head.replace(/[\u4e00-\u9fa5]/g, "aa");
  const headLength = Math.max(emptyHead.length + 2, MIN_HEAD_LENGTH);
  const fillLength = Math.max(MIN_HEAD_LENGTH - emptyHead.length, 0);
  if (!content) {
    shell.echo(color[level](head));
    return;
  }
  if (content && typeof content !== "string") {
    shell.echo(color[level](head));
    shell.echo(content);
    return;
  }
  ;
  (content != null ? content : "").replace("/\r\n/g", "\n").split("\n").map((c) => chunk(c, __columns - headLength).map((str) => str.join(""))).reduce((r, c) => r.concat(c)).forEach((str, i) => {
    const _head = i ? " ".repeat(headLength) : color[level](`${head}${" ".repeat(fillLength)}`);
    shell.echo(_head + str);
  });
}
var out = {
  access(head, content) {
    println(0 /* ACCESS */, head, content);
  },
  info(head, content) {
    println(1 /* INFO */, head, content);
  },
  warning(head, content) {
    println(2 /* WARNING */, head, content);
  },
  err(head, content) {
    println(3 /* ERROR */, head, content);
  },
  debug(head, content) {
    process2.env.DEBUG && println(4 /* DEBUG */, head, content);
  }
};
var out_default = out;

// src/request.ts
import { request as req } from "urllib";
var request = (url, reqOpts) => __async(void 0, null, function* () {
  var _a2;
  const opts = __spreadValues({
    contentType: "json",
    dataType: "json",
    headers: __spreadValues({
      "User-Agent": "Elog"
    }, reqOpts == null ? void 0 : reqOpts.headers),
    gzip: true,
    // proxy
    rejectUnauthorized: !process.env.http_proxy,
    enableProxy: !!process.env.http_proxy,
    proxy: process.env.http_proxy,
    // 超时时间 60s
    timeout: Number(((_a2 = process.env) == null ? void 0 : _a2.REQUEST_TIMEOUT) || 6e4) || 6e4
  }, reqOpts);
  out_default.debug("API\u8BF7\u6C42", JSON.stringify(opts));
  return req(url, opts);
});

// src/index.ts
import { HttpClientResponse as HttpClientResponse2, RequestOptions as RequestOptions2 } from "urllib";
export {
  HttpClientResponse2 as HttpClientResponse,
  RequestOptions2 as RequestOptions,
  out_default as out,
  request
};
//# sourceMappingURL=index.js.map