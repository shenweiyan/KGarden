var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/platform/local.ts
import filenamify from "filenamify";
import path2 from "path";
import mkdirp from "mkdirp";
import { out as out2 } from "@elog/shared";
import fs from "fs";

// src/const.ts
var FileNameEnum = /* @__PURE__ */ ((FileNameEnum2) => {
  FileNameEnum2["TITLE"] = "title";
  FileNameEnum2["URLNAME"] = "urlname";
  return FileNameEnum2;
})(FileNameEnum || {});
var FormatEnum = /* @__PURE__ */ ((FormatEnum2) => {
  FormatEnum2["MARKDOWN"] = "markdown";
  FormatEnum2["MATTER_MARKDOWN"] = "matter-markdown";
  FormatEnum2["HTML"] = "html";
  FormatEnum2["WIKI"] = "wiki";
  return FormatEnum2;
})(FormatEnum || {});
var fileNameList = Object.values(FileNameEnum);
var formatList = Object.values(FormatEnum);

// src/adapter/index.ts
import { out } from "@elog/shared";
import path from "path";
import {
  htmlAdapter,
  markdownAdapter,
  matterMarkdownAdapter,
  wikiAdapter
} from "@elog/plugin-adapter";
var AdapterClient = class {
  constructor(config) {
    this.config = config;
    this.ctx = this.initAdapter();
  }
  /**
   * 初始化适配器
   * @private
   */
  initAdapter() {
    if (this.config.formatExt) {
      out.warning("\u6CE8\u610F", "\u6B63\u5728\u52A0\u8F7D\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\uFF0C\u8BF7\u9075\u5FAA\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u6CE8\u5165\u89C4\u8303");
      try {
        const formatExtPath = path.resolve(process.cwd(), this.config.formatExt);
        const { format } = __require(formatExtPath);
        return format;
      } catch (e) {
        out.err(e.message);
        out.err("\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u52A0\u8F7D\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF01");
        process.exit(1);
      }
    } else {
      switch (this.config.format) {
        case "markdown" /* MARKDOWN */:
          return markdownAdapter;
        case "matter-markdown" /* MATTER_MARKDOWN */:
          return matterMarkdownAdapter;
        case "wiki" /* WIKI */:
          return wikiAdapter;
        case "html" /* HTML */:
          return htmlAdapter;
        default:
          out.warning(`\u76EE\u524D\u53EA\u652F\u6301\u5C06\u6587\u6863\u8F6C\u6362\u4E3A${formatList.toString()}\uFF0C\u5C06\u9ED8\u8BA4\u4EE5markdown\u5F62\u5F0F\u8F6C\u6362`);
          return markdownAdapter;
      }
    }
  }
  /**
   * 获取文档处理器
   */
  getAdapter() {
    return this.ctx;
  }
};

// src/platform/local.ts
var DeployLocal = class {
  constructor(config) {
    this.cacheFileNames = [];
    this.config = config;
    this.adapterClient = new AdapterClient({ format: config.format, formatExt: config.formatExt });
    this.adapter = this.adapterClient.getAdapter();
  }
  /**
   * 本地部署
   * @param articleList
   */
  deploy(articleList) {
    return __async(this, null, function* () {
      let { filename = "title" /* TITLE */ } = this.config;
      if (!fileNameList.includes(filename)) {
        filename = "title" /* TITLE */;
        out2.warning(
          "\u914D\u7F6E\u9519\u8BEF",
          `\u6587\u4EF6\u547D\u540D\u65B9\u5F0F\u76EE\u524D\u53EA\u652F\u6301${fileNameList.toString()}\uFF0C\u5C06\u9ED8\u8BA4\u4EE5title\u5F62\u5F0F\u547D\u540D`
        );
      }
      const outputDir = path2.join(process.cwd(), this.config.outputDir);
      for (const post of articleList) {
        let formatBody = this.adapter(post);
        let fileName = filenamify(post.properties[filename]);
        if (!fileName) {
          out2.warning(`\u5B58\u5728\u672A\u547D\u540D\u6587\u6863\uFF0C\u5C06\u81EA\u52A8\u91CD\u547D\u540D\u4E3A\u3010\u672A\u547D\u540D\u6587\u6863_${post.doc_id}\u3011`);
          fileName = `\u672A\u547D\u540D\u6587\u6863_${post.doc_id}`;
        }
        let postPath;
        if (this.config.catalog) {
          if (Array.isArray(post.catalog)) {
            const tocPath = post.catalog.map((item) => item.title).join("/");
            fileName = this.checkFileName(fileName + tocPath, fileName, post.doc_id);
            const outdir = path2.join(outputDir, tocPath);
            mkdirp.sync(outdir);
            postPath = path2.join(outdir, `${fileName}.md`);
            out2.info("\u751F\u6210\u6587\u6863", `${fileName}.md`);
          } else {
            out2.warning("\u76EE\u5F55\u7F3A\u5931", `${fileName}\u7F3A\u5931\u76EE\u5F55\u4FE1\u606F\uFF0C\u5C06\u751F\u6210\u5728\u6307\u5B9A\u76EE\u5F55`);
            fileName = this.checkFileName(fileName, fileName, post.doc_id);
            postPath = path2.join(outputDir, `${fileName}.md`);
            out2.info("\u751F\u6210\u6587\u6863", `${fileName}.md`);
            mkdirp.sync(outputDir);
          }
        } else {
          fileName = this.checkFileName(fileName, fileName, post.doc_id);
          postPath = path2.join(outputDir, `${fileName}.md`);
          out2.info("\u751F\u6210\u6587\u6863", `${fileName}.md`);
          mkdirp.sync(outputDir);
        }
        fs.writeFileSync(postPath, formatBody, {
          encoding: "utf8"
        });
      }
      out2.access("\u4EFB\u52A1\u7ED3\u675F", "\u{1F389}\u66F4\u65B0\u6210\u529F\u{1F389}");
    });
  }
  /**
   * 检查文件名
   * @param fileName
   * @param originName
   * @param doc_id
   */
  checkFileName(fileName, originName, doc_id) {
    let newName;
    if (this.cacheFileNames.includes(fileName)) {
      const newFileName = `${originName}_${doc_id}`;
      out2.warning("\u6587\u6863\u91CD\u590D", `${originName}.md\u6587\u6863\u5DF2\u5B58\u5728\uFF0C\u5C06\u4E3A\u81EA\u52A8\u91CD\u547D\u540D\u4E3A${newFileName}.md`);
      newName = newFileName;
    } else {
      newName = originName;
      this.cacheFileNames.push(fileName);
    }
    return newName;
  }
};
var local_default = DeployLocal;

// src/platform/confluence.ts
import { out as out3 } from "@elog/shared";
import ConfluenceClient from "@elog/sdk-confluence";
var DeployConfluence = class {
  constructor(config) {
    this.config = config;
    this.ctx = new ConfluenceClient(config);
    this.adapterClient = new AdapterClient({ format: "wiki" /* WIKI */, formatExt: config.formatExt });
    this.adapter = this.adapterClient.getAdapter();
  }
  deploy(articleList) {
    return __async(this, null, function* () {
      out3.info("\u6B63\u5728\u90E8\u7F72\u5230Confluence...");
      const sortArticleList = articleList.sort((a, b) => {
        if (!a.catalog || !b.catalog) {
          return 0;
        }
        return a.catalog.length - b.catalog.length;
      });
      const rootPageList = yield this.ctx.getRootPageList();
      let rootPageMap = {};
      rootPageList.forEach((item) => {
        rootPageMap[item.title] = item;
      });
      for (const articleInfo of sortArticleList) {
        articleInfo.body_wiki = this.adapter(articleInfo);
        const cacheWikiPage = rootPageMap[articleInfo.properties.title];
        if (cacheWikiPage) {
          out3.info("\u66F4\u65B0\u6587\u6863", cacheWikiPage.title);
          const updatingPage = yield this.ctx.getPageById(cacheWikiPage.id);
          const version = updatingPage.version.number + 1;
          yield this.ctx.updatePage(articleInfo, cacheWikiPage.id, version);
        } else {
          out3.info("\u65B0\u589E\u6587\u6863", articleInfo.properties.title);
          let parentId = "";
          const catalog = articleInfo.catalog;
          if (catalog == null ? void 0 : catalog.length) {
            const parentTitle = catalog[catalog.length - 1].title;
            parentId = rootPageMap[parentTitle].id;
          }
          try {
            const createdPage = yield this.ctx.createPage(articleInfo, parentId);
            rootPageMap[createdPage.title] = createdPage;
          } catch (e) {
            if (e.message.indexOf("A page with this title already exists") > -1) {
              out3.err(
                "\u8DF3\u8FC7\u90E8\u7F72",
                `\u6587\u7AE0\u6807\u9898\u5DF2\u5B58\u5728\u4E8Econfluence, \u8BF7\u68C0\u67E5: ${articleInfo.properties.title}`
              );
            } else {
              out3.err("\u8DF3\u8FC7\u90E8\u7F72", e.message);
            }
          }
        }
      }
      out3.access("\u4EFB\u52A1\u7ED3\u675F", "\u{1F389}\u66F4\u65B0\u6210\u529F\u{1F389}");
    });
  }
};
var confluence_default = DeployConfluence;

// src/client.ts
var Deploy = class {
  constructor(config) {
    this.config = config;
    this.initDeploy();
  }
  initDeploy() {
    if (this.config.platform === "confluence" /* CONFLUENCE */) {
      const config = this.config.confluence;
      this.deployClient = new confluence_default(config);
    } else {
      const config = this.config.local;
      this.deployClient = new local_default(config);
    }
  }
  /**
   * 部署配置
   * @param articleList
   */
  deploy(articleList) {
    return __async(this, null, function* () {
      this.deployClient.deploy(articleList);
    });
  }
};
var client_default = Deploy;

// src/index.ts
export * from "@elog/plugin-adapter";
export * from "@elog/sdk-confluence";
var src_default = client_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map