{"version":3,"sources":["../../src/platform/local.ts","../../src/const.ts","../../src/adapter/index.ts","../../src/platform/confluence.ts","../../src/client.ts","../../src/index.ts"],"sourcesContent":["import filenamify from 'filenamify'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport { out } from '@elog/shared'\nimport fs from 'fs'\nimport { AdapterFunction, LocalConfig } from '../types'\nimport { FileNameEnum, fileNameList } from '../const'\nimport { DocDetail } from '@elog/types'\nimport { AdapterClient } from '../adapter'\n\nclass DeployLocal {\n  config: LocalConfig\n  cacheFileNames: string[] = []\n  adapterClient: AdapterClient\n  /** 文档处理适配器 */\n  adapter: AdapterFunction\n\n  constructor(config: LocalConfig) {\n    this.config = config\n    this.adapterClient = new AdapterClient({ format: config.format, formatExt: config.formatExt })\n    this.adapter = this.adapterClient.getAdapter()\n  }\n\n  /**\n   * 本地部署\n   * @param articleList\n   */\n  async deploy(articleList: DocDetail[]) {\n    let { filename = FileNameEnum.TITLE } = this.config\n    if (!fileNameList.includes(filename)) {\n      filename = FileNameEnum.TITLE\n      out.warning(\n        '配置错误',\n        `文件命名方式目前只支持${fileNameList.toString()}，将默认以title形式命名`,\n      )\n    }\n    const outputDir = path.join(process.cwd(), this.config.outputDir)\n\n    for (const post of articleList) {\n      let formatBody = this.adapter(post)\n      let fileName = filenamify(post.properties[filename])\n      if (!fileName) {\n        // 没有文件名的文档\n        out.warning(`存在未命名文档，将自动重命名为【未命名文档_${post.doc_id}】`)\n        fileName = `未命名文档_${post.doc_id}`\n      }\n      let postPath: string\n      if (this.config.catalog) {\n        // 开启按目录生成\n        if (Array.isArray(post.catalog)) {\n          // 是否存在目录\n          // NOTE 目前只有语雀返回了这个目录信息\n          const tocPath = post.catalog.map((item) => item.title).join('/')\n          fileName = this.checkFileName(fileName + tocPath, fileName, post.doc_id)\n          const outdir = path.join(outputDir, tocPath)\n          mkdirp.sync(outdir)\n          postPath = path.join(outdir, `${fileName}.md`)\n          // 生成文件夹\n          out.info('生成文档', `${fileName}.md`)\n        } else {\n          out.warning('目录缺失', `${fileName}缺失目录信息，将生成在指定目录`)\n          // 不存在则直接生成\n          fileName = this.checkFileName(fileName, fileName, post.doc_id)\n          postPath = path.join(outputDir, `${fileName}.md`)\n          out.info('生成文档', `${fileName}.md`)\n          mkdirp.sync(outputDir)\n        }\n      } else {\n        // 直接生成\n        fileName = this.checkFileName(fileName, fileName, post.doc_id)\n        postPath = path.join(outputDir, `${fileName}.md`)\n        out.info('生成文档', `${fileName}.md`)\n        mkdirp.sync(outputDir)\n      }\n      fs.writeFileSync(postPath, formatBody, {\n        encoding: 'utf8',\n      })\n    }\n    out.access('任务结束', '🎉更新成功🎉')\n  }\n\n  /**\n   * 检查文件名\n   * @param fileName\n   * @param originName\n   * @param doc_id\n   */\n  checkFileName(fileName: string, originName: string, doc_id: string) {\n    let newName: string\n    if (this.cacheFileNames.includes(fileName)) {\n      const newFileName = `${originName}_${doc_id}`\n      out.warning('文档重复', `${originName}.md文档已存在，将为自动重命名为${newFileName}.md`)\n      newName = newFileName\n    } else {\n      newName = originName\n      this.cacheFileNames.push(fileName)\n    }\n    return newName\n  }\n}\n\nexport default DeployLocal\n","/**\n * 部署平台\n */\nexport enum DeployPlatformEnum {\n  LOCAL = 'local',\n  CONFLUENCE = 'confluence',\n}\n\n/**\n * 本地部署相关\n */\nexport enum FileNameEnum {\n  TITLE = 'title',\n  URLNAME = 'urlname',\n}\nexport enum FormatEnum {\n  MARKDOWN = 'markdown',\n  MATTER_MARKDOWN = 'matter-markdown',\n  HTML = 'html',\n  WIKI = 'wiki',\n}\n\nexport const fileNameList = Object.values(FileNameEnum)\n\nexport const formatList = Object.values(FormatEnum)\n","import { out } from '@elog/shared'\nimport path from 'path'\nimport {\n  htmlAdapter,\n  markdownAdapter,\n  matterMarkdownAdapter,\n  wikiAdapter,\n} from '@elog/plugin-adapter'\nimport { AdapterConfig, AdapterFunction } from '../types'\nimport { FormatEnum, formatList } from '../const'\n\n/**\n * 文档处理适配器\n */\nexport class AdapterClient {\n  config: AdapterConfig\n  ctx: AdapterFunction\n\n  constructor(config: AdapterConfig) {\n    this.config = config\n    this.ctx = this.initAdapter()\n  }\n\n  /**\n   * 初始化适配器\n   * @private\n   */\n  private initAdapter() {\n    if (this.config.formatExt) {\n      out.warning('注意', '正在加载文档处理拓展点，请遵循文档处理拓展点注入规范')\n      try {\n        // 加载拓展点\n        // 如果指定了secret拓展点，那么拓展点返回的账号密码信息，将会覆盖elog-config.json中的image信息\n        const formatExtPath = path.resolve(process.cwd(), this.config.formatExt)\n        // 拓展点需要暴露format方法\n        const { format } = require(formatExtPath)\n        return format\n      } catch (e: any) {\n        out.err(e.message)\n        out.err('文档处理拓展点加载失败，请检查！')\n        process.exit(1)\n      }\n    } else {\n      switch (this.config.format) {\n        case FormatEnum.MARKDOWN:\n          return markdownAdapter\n        case FormatEnum.MATTER_MARKDOWN:\n          return matterMarkdownAdapter\n        case FormatEnum.WIKI:\n          return wikiAdapter\n        case FormatEnum.HTML:\n          return htmlAdapter\n        default:\n          out.warning(`目前只支持将文档转换为${formatList.toString()}，将默认以markdown形式转换`)\n          return markdownAdapter\n      }\n    }\n  }\n\n  /**\n   * 获取文档处理器\n   */\n  public getAdapter() {\n    return this.ctx\n  }\n}\n","import { out } from '@elog/shared'\nimport ConfluenceClient, { ConfluenceConfig, WikiMap } from '@elog/sdk-confluence'\nimport { DocDetail } from '@elog/types'\nimport { AdapterClient } from '../adapter'\nimport { AdapterFunction } from '../types'\nimport { FormatEnum } from '../const'\n\nclass DeployConfluence {\n  config: ConfluenceConfig\n  ctx: ConfluenceClient\n  adapterClient: AdapterClient\n  /** 文档处理适配器 */\n  adapter: AdapterFunction\n\n  constructor(config: ConfluenceConfig) {\n    this.config = config\n    this.ctx = new ConfluenceClient(config)\n    this.adapterClient = new AdapterClient({ format: FormatEnum.WIKI, formatExt: config.formatExt })\n    this.adapter = this.adapterClient.getAdapter()\n  }\n\n  async deploy(articleList: DocDetail[]) {\n    out.info('正在部署到Confluence...')\n    // 重新排序articleList，按照层级更新文章\n    // 先更新第一级，再更新第二级...\n    const sortArticleList = articleList.sort((a, b) => {\n      if (!a.catalog || !b.catalog) {\n        return 0\n      }\n      return a.catalog.length - b.catalog.length\n    })\n    // 获取rootPage下的文章列表\n    const rootPageList = await this.ctx.getRootPageList()\n    let rootPageMap: WikiMap = {}\n    // List转Map\n    rootPageList.forEach((item) => {\n      rootPageMap[item.title] = item\n    })\n    // 根据目录上传到wiki上\n    for (const articleInfo of sortArticleList) {\n      // 将markdown转wiki\n      articleInfo.body_wiki = this.adapter(articleInfo)\n      // 是否存在\n      const cacheWikiPage = rootPageMap[articleInfo.properties.title]\n      if (cacheWikiPage) {\n        out.info('更新文档', cacheWikiPage.title)\n        // 获取版本信息\n        const updatingPage = await this.ctx.getPageById(cacheWikiPage.id)\n        const version = updatingPage.version.number + 1\n        await this.ctx.updatePage(articleInfo, cacheWikiPage.id, version)\n      } else {\n        out.info('新增文档', articleInfo.properties.title)\n        // 新增\n        // 在rootPageMap中找到parent title\n        let parentId = ''\n        const catalog = articleInfo.catalog\n        if (catalog?.length) {\n          const parentTitle = catalog[catalog.length - 1].title\n          parentId = rootPageMap[parentTitle].id\n        }\n        // 直接新增\n        // 如果有parentId就存在parentPage下，没有则存在空间的rootPage下\n        try {\n          const createdPage = await this.ctx.createPage(articleInfo, parentId)\n          // 临时更新Map\n          rootPageMap[createdPage.title] = createdPage\n        } catch (e: any) {\n          // 有可能是重名更新失败\n          if (e.message.indexOf('A page with this title already exists') > -1) {\n            out.err(\n              '跳过部署',\n              `文章标题已存在于confluence, 请检查: ${articleInfo.properties.title}`,\n            )\n          } else {\n            out.err('跳过部署', e.message)\n          }\n        }\n      }\n    }\n    out.access('任务结束', '🎉更新成功🎉')\n  }\n}\n\nexport default DeployConfluence\n","import DeployLocal from './platform/local'\nimport DeployConfluence from './platform/confluence'\nimport { DeployPlatformEnum } from './const'\nimport { DeployConfig, LocalConfig } from './types'\nimport { ConfluenceConfig } from '@elog/sdk-confluence'\nimport { DocDetail } from '@elog/types'\n\n/**\n * 部署器\n */\nclass Deploy {\n  config: DeployConfig\n  deployClient: any\n\n  constructor(config: DeployConfig) {\n    this.config = config\n    // 初始化部署方式\n    this.initDeploy()\n  }\n\n  initDeploy() {\n    if (this.config.platform === DeployPlatformEnum.CONFLUENCE) {\n      const config = this.config.confluence as ConfluenceConfig\n      this.deployClient = new DeployConfluence(config)\n    } else {\n      const config = this.config.local as LocalConfig\n      this.deployClient = new DeployLocal(config)\n    }\n  }\n\n  /**\n   * 部署配置\n   * @param articleList\n   */\n  async deploy(articleList: DocDetail[]) {\n    this.deployClient.deploy(articleList)\n  }\n}\n\nexport default Deploy\n","import Deploy from './client'\nexport * from './types'\nexport * from '@elog/plugin-adapter'\nexport * from '@elog/sdk-confluence'\nexport default Deploy\n"],"mappings":"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","names":["path","out","FileNameEnum","FormatEnum","out","path","out","out"]}