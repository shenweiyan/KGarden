import * as _elog_types from '@elog/types';
import { DocProperties, DocCatalog, NotionCatalog, DocDetail, BaseDoc } from '@elog/types';
import { Client } from '@notionhq/client';
import { NotionToMarkdown } from 'notion-to-md';
import { PageObjectResponse } from '@notionhq/client/build/src/api-endpoints';

declare enum NotionSortPresetEnum {
    /** 按自定义日期排序 */
    dateDesc = "dateDesc",
    dateAsc = "dateAsc",
    /** 按创建时间排序 */
    createTimeDesc = "createTimeDesc",
    createTimeAsc = "createTimeAsc",
    /** 按更新时间排序 */
    updateTimeDesc = "updateTimeDesc",
    updateTimeAsc = "updateTimeAsc",
    /** 按sort字段排序 */
    sortDesc = "sortDesc",
    sortAsc = "sortAsc"
}
declare enum NotionSortDirectionEnum {
    /** 降序 */
    descending = "descending",
    /** 升序 */
    ascending = "ascending"
}

interface NotionSort {
    property: string;
    direction: NotionSortDirectionEnum;
}
interface NotionCatalogConfig {
    enable: boolean;
    property?: string;
}
interface NotionConfig {
    token: string;
    /** 数据库id */
    databaseId: string;
    filter?: any | boolean;
    sorts?: boolean | NotionSortPresetEnum | NotionSort[];
    catalog?: boolean | NotionCatalogConfig;
}
interface NotionDoc extends PageObjectResponse {
    properties: DocProperties;
    catalog: DocCatalog[];
    _index?: number;
}
interface NotionQueryParams {
    database_id: string;
    filter?: any;
    sorts?: any;
    start_cursor?: string;
    page_size?: number;
    archived?: boolean;
}

/**
 * Notion SDK
 */
declare class NotionClient {
    config: NotionConfig;
    notion: Client;
    n2m: NotionToMarkdown;
    catalog: NotionCatalog[];
    requestQueryParams: NotionQueryParams;
    docList: NotionDoc[];
    constructor(config: NotionConfig);
    /**
     * 初始化目录配置
     */
    initCatalogConfig(): void;
    /**
     * 初始化请求参数
     */
    initRequestQueryParams(): {
        database_id: string;
        filter: any;
        sorts: any;
    };
    /**
     * 获取指定文章列表
     */
    getPageList(): Promise<NotionDoc[]>;
    /**
     * 下载一篇文章
     * @param {*} page
     */
    download(page: NotionDoc): Promise<DocDetail>;
    /**
     * 获取文章列表
     * @param cachedPages 已经下载过的pages
     * @param ids 需要下载的doc_id列表
     */
    getPageDetailList(cachedPages: NotionDoc[], ids: string[]): Promise<DocDetail[]>;
}

declare class Notion {
    config: NotionConfig;
    ctx: NotionClient;
    pages: NotionDoc[];
    constructor(config: NotionConfig);
    /**
     * 获取文章列表（不含详情）
     */
    getDocList(): Promise<BaseDoc[]>;
    /**
     * 获取文章详情列表
     * @param ids 需要下载的doc_id列表
     */
    getDocDetailList(ids: string[]): Promise<_elog_types.DocDetail[]>;
}

export { NotionCatalogConfig, NotionConfig, NotionDoc, NotionQueryParams, NotionSort, Notion as default };
