var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
import { Client } from "@notionhq/client";
import { NotionToMarkdown } from "notion-to-md";
import asyncPool from "tiny-async-pool";

// src/utils.ts
import moment from "moment";
import { out } from "@elog/shared";
function getPropVal(data) {
  let val = data[data.type];
  if (!val)
    return "";
  switch (data.type) {
    case "multi_select":
      return val.map((a) => a.name);
    case "select":
      return val.name;
    case "date":
      return val.start;
    case "rich_text":
    case "title":
      return val.map((a) => a.plain_text).join("");
    case "text":
      return data.plain_text;
    case "files":
      if (val.length < 1)
        return "";
      return val[0][val[0].type].url;
    default:
      return val;
  }
}
function props(page) {
  var _a;
  let data = {};
  if (!Object.keys(page.properties).length)
    return data;
  let titleKey = "";
  for (const key in page.properties) {
    if (((_a = page.properties[key]) == null ? void 0 : _a.type) === "title") {
      titleKey = key;
    }
    data[key] = getPropVal(page.properties[key]);
  }
  if (!data.title) {
    const titleVal = page.properties[titleKey].title;
    data.title = titleVal.map((a) => a.plain_text).join("");
  }
  if (!data.urlname) {
    data.urlname = page.id;
  }
  if (!data.date) {
    data.date = formatDate(page.created_time);
  }
  if (!data.updated) {
    data.updated = formatDate(page.last_edited_time);
  }
  return data;
}
function formatDate(date) {
  return moment(date).format("YYYY-MM-DD HH:mm:ss");
}
function genCatalog(page, property) {
  const catalog = page.properties[property];
  if (!catalog) {
    out.warning(`${page.properties.title} ${property} \u5C5E\u6027\u7F3A\u5931`);
    return void 0;
  } else if (typeof catalog === "string") {
    return [
      {
        title: catalog,
        doc_id: page.id
      }
    ];
  } else if (Array.isArray(catalog)) {
    return catalog.map((item) => {
      return {
        title: item,
        doc_id: page.id
      };
    });
  } else {
    out.warning(
      `${page.properties.title} \u6587\u6863\u5206\u7C7B\u4FE1\u606F\u63D0\u53D6\u5931\u8D25\uFF0C${property} \u5B57\u6BB5\u53EA\u80FD\u662F\uFF08Select\uFF09\u5355\u9009/\uFF08Multi-select\uFF09\u591A\u9009`
    );
    return void 0;
  }
}

// src/client.ts
import { out as out2 } from "@elog/shared";
var NotionClient = class {
  constructor(config) {
    this.catalog = [];
    this.docList = [];
    this.config = config;
    this.config.token = config.token || process.env.NOTION_TOKEN;
    if (!this.config.token) {
      out2.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11Notion Token");
      process.exit(-1);
    }
    this.notion = new Client({ auth: this.config.token });
    this.n2m = new NotionToMarkdown({ notionClient: this.notion });
    this.initCatalogConfig();
    this.requestQueryParams = this.initRequestQueryParams();
  }
  /**
   * 初始化目录配置
   */
  initCatalogConfig() {
    if (typeof this.config.catalog === "boolean") {
      if (!this.config.catalog) {
        this.config.catalog = { enable: false };
      } else {
        out2.access("\u5F00\u542F\u5206\u7C7B", "\u9ED8\u8BA4\u6309\u7167 catalog \u5B57\u6BB5\u5206\u7C7B\uFF0C\u8BF7\u68C0\u67E5Notion\u6570\u636E\u5E93\u662F\u5426\u5B58\u5728\u8BE5\u5C5E\u6027");
        this.config.catalog = { enable: true, property: "catalog" };
      }
    } else if (typeof this.config.catalog === "object") {
      if (this.config.catalog.enable) {
        if (!this.config.catalog.property) {
          this.config.catalog.property = "catalog";
          out2.warning("\u672A\u8BBE\u7F6E\u5206\u7C7B\u5B57\u6BB5\uFF0C\u9ED8\u8BA4\u6309\u7167 catalog \u5B57\u6BB5\u5206\u7C7B\uFF0C\u8BF7\u68C0\u67E5Notion\u6570\u636E\u5E93\u662F\u5426\u5B58\u5728\u8BE5\u5C5E\u6027");
        }
      }
    }
  }
  /**
   * 初始化请求参数
   */
  initRequestQueryParams() {
    let sorts;
    if (typeof this.config.sorts === "boolean") {
      if (!this.config.sorts) {
        sorts = void 0;
      } else {
        sorts = [{ timestamp: "created_time", direction: "descending" /* descending */ }];
      }
    } else if (typeof this.config.sorts === "string") {
      const sortPreset = this.config.sorts;
      switch (sortPreset) {
        case "dateDesc" /* dateDesc */:
          sorts = [{ property: "date", direction: "descending" /* descending */ }];
          break;
        case "dateAsc" /* dateAsc */:
          sorts = [{ property: "date", direction: "ascending" /* ascending */ }];
          break;
        case "sortDesc" /* sortDesc */:
          sorts = [{ property: "sort", direction: "descending" /* descending */ }];
          break;
        case "sortAsc" /* sortAsc */:
          sorts = [{ property: "sort", direction: "ascending" /* ascending */ }];
          break;
        case "createTimeDesc" /* createTimeDesc */:
          sorts = [{ timestamp: "created_time", direction: "descending" /* descending */ }];
          break;
        case "createTimeAsc" /* createTimeAsc */:
          sorts = [{ timestamp: "created_time", direction: "ascending" /* ascending */ }];
          break;
        case "updateTimeDesc" /* updateTimeDesc */:
          sorts = [{ timestamp: "last_edited_time", direction: "descending" /* descending */ }];
          break;
        case "updateTimeAsc" /* updateTimeAsc */:
          sorts = [{ timestamp: "last_edited_time", direction: "ascending" /* ascending */ }];
          break;
        default:
          sorts = [{ timestamp: "created_time", direction: "descending" /* descending */ }];
      }
    } else {
      sorts = this.config.sorts;
    }
    let filter;
    if (typeof this.config.filter === "boolean") {
      if (!this.config.filter) {
        filter = void 0;
      } else {
        filter = {
          property: "status",
          select: {
            equals: "\u5DF2\u53D1\u5E03"
          }
        };
      }
    } else if (!this.config.filter) {
      filter = void 0;
    } else {
      filter = this.config.filter;
    }
    return {
      database_id: this.config.databaseId,
      filter,
      sorts
    };
  }
  /**
   * 获取指定文章列表
   */
  getPageList() {
    return __async(this, null, function* () {
      let resp = yield this.notion.databases.query(__spreadValues({}, this.requestQueryParams));
      let docs = resp.results;
      docs = docs.map((doc) => {
        doc.properties = props(doc);
        return doc;
      });
      this.catalog.push(...docs);
      this.docList.push(...docs);
      if (resp.has_more && resp.next_cursor) {
        this.requestQueryParams = __spreadProps(__spreadValues({}, this.requestQueryParams), {
          start_cursor: resp.next_cursor
        });
        yield this.getPageList();
      }
      return this.docList;
    });
  }
  /**
   * 下载一篇文章
   * @param {*} page
   */
  download(page) {
    return __async(this, null, function* () {
      const blocks = yield this.n2m.pageToMarkdown(page.id);
      if (!blocks.length) {
        out2.warning(`${page.properties.title} \u6587\u6863\u4E0B\u8F7D\u8D85\u65F6\u6216\u65E0\u5185\u5BB9 `);
      }
      let body = this.n2m.toMarkdownString(blocks);
      const timestamp = new Date(page.last_edited_time).getTime();
      let catalog;
      const catalogConfig = this.config.catalog;
      if (catalogConfig == null ? void 0 : catalogConfig.enable) {
        catalog = genCatalog(page, catalogConfig.property);
      }
      return {
        id: page.id,
        doc_id: page.id,
        properties: page.properties,
        body,
        body_original: body,
        updated: timestamp,
        catalog
      };
    });
  }
  /**
   * 获取文章列表
   * @param cachedPages 已经下载过的pages
   * @param ids 需要下载的doc_id列表
   */
  getPageDetailList(cachedPages, ids) {
    return __async(this, null, function* () {
      let articleList = [];
      let pages = cachedPages;
      if (ids == null ? void 0 : ids.length) {
        pages = pages.filter((page) => {
          const exist = ids.indexOf(page.id) > -1;
          if (!exist) {
            const title = page.properties.title;
            out2.info("\u8DF3\u8FC7\u4E0B\u8F7D", title);
          }
          return exist;
        });
      }
      if (!(pages == null ? void 0 : pages.length)) {
        out2.info("\u8DF3\u8FC7", "\u6CA1\u6709\u9700\u8981\u4E0B\u8F7D\u7684\u6587\u7AE0");
        return articleList;
      }
      out2.info("\u5F85\u4E0B\u8F7D\u6570", String(pages.length));
      out2.info("\u5F00\u59CB\u4E0B\u8F7D\u6587\u6863...");
      pages = pages.map((item, index) => __spreadProps(__spreadValues({}, item), { _index: index + 1 }));
      const promise = (page) => __async(this, null, function* () {
        out2.info(`\u4E0B\u8F7D\u6587\u6863 ${page._index}/${pages.length}   `, page.properties.title);
        let article = yield this.download(page);
        articleList.push(article);
      });
      yield asyncPool(5, pages, promise);
      out2.info("\u5DF2\u4E0B\u8F7D\u6570", String(articleList.length));
      return articleList;
    });
  }
};
var client_default = NotionClient;

// src/core.ts
import { out as out3 } from "@elog/shared";
var Notion = class {
  constructor(config) {
    this.pages = [];
    this.config = config;
    this.ctx = new client_default(config);
  }
  /**
   * 获取文章列表（不含详情）
   */
  getDocList() {
    return __async(this, null, function* () {
      out3.info("\u6B63\u5728\u83B7\u53D6\u6587\u6863\u5217\u8868\uFF0C\u8BF7\u7A0D\u7B49...");
      const pages = yield this.ctx.getPageList();
      this.pages = pages;
      out3.info("\u6587\u6863\u603B\u6570", String(this.pages.length));
      return pages.map((page) => {
        const timestamp = new Date(page.last_edited_time).getTime();
        return {
          // 暂时只需要返回这些属性
          id: page.id,
          doc_id: page.id,
          updated: timestamp
        };
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param ids 需要下载的doc_id列表
   */
  getDocDetailList(ids) {
    return __async(this, null, function* () {
      return yield this.ctx.getPageDetailList(this.pages, ids);
    });
  }
};
var core_default = Notion;

// src/index.ts
var src_default = core_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map