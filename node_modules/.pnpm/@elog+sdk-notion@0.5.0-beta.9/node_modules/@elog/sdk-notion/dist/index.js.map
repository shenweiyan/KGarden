{"version":3,"sources":["../src/client.ts","../src/utils.ts","../src/core.ts","../src/index.ts"],"names":["out"],"mappings":"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","sourcesContent":["import { Client } from '@notionhq/client'\nimport { NotionToMarkdown } from 'notion-to-md'\nimport asyncPool from 'tiny-async-pool'\nimport { genCatalog, props } from './utils'\nimport {\n  NotionCatalogConfig,\n  NotionConfig,\n  NotionDoc,\n  NotionQueryParams,\n  NotionSort,\n} from './types'\nimport { out } from '@elog/shared'\nimport { DocDetail, DocCatalog, NotionCatalog } from '@elog/types'\nimport { NotionSortDirectionEnum, NotionSortPresetEnum } from './const'\n\n/**\n * Notion SDK\n */\nclass NotionClient {\n  config: NotionConfig\n  notion: Client\n  n2m: NotionToMarkdown\n  catalog: NotionCatalog[] = []\n  requestQueryParams: NotionQueryParams\n  docList: NotionDoc[] = []\n  constructor(config: NotionConfig) {\n    this.config = config\n    this.config.token = config.token || process.env.NOTION_TOKEN!\n    if (!this.config.token) {\n      out.err('缺少参数', '缺少Notion Token')\n      process.exit(-1)\n    }\n    this.notion = new Client({ auth: this.config.token })\n    this.n2m = new NotionToMarkdown({ notionClient: this.notion })\n    this.initCatalogConfig()\n    this.requestQueryParams = this.initRequestQueryParams()\n  }\n\n  /**\n   * 初始化目录配置\n   */\n  initCatalogConfig() {\n    if (typeof this.config.catalog === 'boolean') {\n      if (!this.config.catalog) {\n        // 不启用目录\n        this.config.catalog = { enable: false }\n      } else {\n        // 启用目录\n        out.access('开启分类', '默认按照 catalog 字段分类，请检查Notion数据库是否存在该属性')\n        this.config.catalog = { enable: true, property: 'catalog' }\n      }\n    } else if (typeof this.config.catalog === 'object') {\n      if (this.config.catalog.enable) {\n        // 检查分类字段是否存在\n        if (!this.config.catalog.property) {\n          this.config.catalog.property = 'catalog'\n          out.warning('未设置分类字段，默认按照 catalog 字段分类，请检查Notion数据库是否存在该属性')\n        }\n      }\n    }\n  }\n\n  /**\n   * 初始化请求参数\n   */\n  initRequestQueryParams() {\n    let sorts: any\n    if (typeof this.config.sorts === 'boolean') {\n      if (!this.config.sorts) {\n        // 不排序\n        sorts = undefined\n      } else {\n        // 默认排序\n        sorts = [{ timestamp: 'created_time', direction: NotionSortDirectionEnum.descending }]\n      }\n    } else if (typeof this.config.sorts === 'string') {\n      // 预设值\n      const sortPreset = this.config.sorts as NotionSortPresetEnum\n      switch (sortPreset) {\n        case NotionSortPresetEnum.dateDesc:\n          sorts = [{ property: 'date', direction: NotionSortDirectionEnum.descending }]\n          break\n        case NotionSortPresetEnum.dateAsc:\n          sorts = [{ property: 'date', direction: NotionSortDirectionEnum.ascending }]\n          break\n        case NotionSortPresetEnum.sortDesc:\n          sorts = [{ property: 'sort', direction: NotionSortDirectionEnum.descending }]\n          break\n        case NotionSortPresetEnum.sortAsc:\n          sorts = [{ property: 'sort', direction: NotionSortDirectionEnum.ascending }]\n          break\n        case NotionSortPresetEnum.createTimeDesc:\n          sorts = [{ timestamp: 'created_time', direction: NotionSortDirectionEnum.descending }]\n          break\n        case NotionSortPresetEnum.createTimeAsc:\n          sorts = [{ timestamp: 'created_time', direction: NotionSortDirectionEnum.ascending }]\n          break\n        case NotionSortPresetEnum.updateTimeDesc:\n          sorts = [{ timestamp: 'last_edited_time', direction: NotionSortDirectionEnum.descending }]\n          break\n        case NotionSortPresetEnum.updateTimeAsc:\n          sorts = [{ timestamp: 'last_edited_time', direction: NotionSortDirectionEnum.ascending }]\n          break\n        default:\n          sorts = [{ timestamp: 'created_time', direction: NotionSortDirectionEnum.descending }]\n      }\n    } else {\n      // 自定义排序\n      sorts = this.config.sorts as NotionSort[]\n    }\n\n    let filter: any\n    if (typeof this.config.filter === 'boolean') {\n      if (!this.config.filter) {\n        filter = undefined\n      } else {\n        filter = {\n          property: 'status',\n          select: {\n            equals: '已发布',\n          },\n        }\n      }\n    } else if (!this.config.filter) {\n      filter = undefined\n    } else {\n      filter = this.config.filter\n    }\n    return {\n      database_id: this.config.databaseId,\n      filter,\n      sorts,\n    }\n  }\n\n  /**\n   * 获取指定文章列表\n   */\n  async getPageList() {\n    let resp = await this.notion.databases.query({\n      ...this.requestQueryParams,\n    })\n    let docs = resp.results as NotionDoc[]\n    docs = docs.map((doc) => {\n      // 转换props\n      doc.properties = props(doc)\n      return doc\n    })\n    this.catalog.push(...docs)\n    this.docList.push(...docs)\n    // 分页查询\n    if (resp.has_more && resp.next_cursor) {\n      // 有更多数据\n      this.requestQueryParams = {\n        ...this.requestQueryParams,\n        start_cursor: resp.next_cursor,\n      }\n      await this.getPageList()\n    }\n    return this.docList\n  }\n\n  /**\n   * 下载一篇文章\n   * @param {*} page\n   */\n  async download(page: NotionDoc): Promise<DocDetail> {\n    const blocks = await this.n2m.pageToMarkdown(page.id)\n    if (!blocks.length) {\n      out.warning(`${page.properties.title} 文档下载超时或无内容 `)\n    }\n    let body = this.n2m.toMarkdownString(blocks)\n    const timestamp = new Date(page.last_edited_time).getTime()\n    let catalog: DocCatalog[] | undefined\n    const catalogConfig = this.config.catalog as NotionCatalogConfig\n    if (catalogConfig?.enable) {\n      // 生成目录\n      catalog = genCatalog(page, catalogConfig.property!)\n    }\n    return {\n      id: page.id,\n      doc_id: page.id,\n      properties: page.properties,\n      body,\n      body_original: body,\n      updated: timestamp,\n      catalog,\n    }\n  }\n\n  /**\n   * 获取文章列表\n   * @param cachedPages 已经下载过的pages\n   * @param ids 需要下载的doc_id列表\n   */\n  async getPageDetailList(cachedPages: NotionDoc[], ids: string[]) {\n    // 获取待发布的文章\n    let articleList: DocDetail[] = []\n    let pages: NotionDoc[] = cachedPages\n    if (ids?.length) {\n      // 取交集，过滤不需要下载的page\n      pages = pages.filter((page) => {\n        const exist = ids.indexOf(page.id) > -1\n        if (!exist) {\n          // @ts-ignore\n          const title = page.properties.title\n          out.info('跳过下载', title)\n        }\n        return exist\n      })\n    }\n    if (!pages?.length) {\n      out.info('跳过', '没有需要下载的文章')\n      return articleList\n    }\n    out.info('待下载数', String(pages.length))\n    out.info('开始下载文档...')\n    pages = pages.map((item, index) => ({ ...item, _index: index + 1 } as NotionDoc))\n    const promise = async (page: NotionDoc) => {\n      out.info(`下载文档 ${page._index}/${pages.length}   `, page.properties.title)\n      let article = await this.download(page)\n      articleList.push(article)\n    }\n    await asyncPool(5, pages, promise)\n    out.info('已下载数', String(articleList.length))\n    return articleList\n  }\n}\n\nexport default NotionClient\n","import { NotionDoc } from './types'\nimport moment from 'moment'\nimport { DocProperties, DocCatalog } from '@elog/types'\nimport { out } from '@elog/shared'\n\n/**\n * 获取元数据Val\n * @param data\n */\nexport function getPropVal(data: any) {\n  let val = data[data.type]\n  if (!val) return ''\n  switch (data.type) {\n    case 'multi_select':\n      return val.map((a: any) => a.name)\n    case 'select':\n      return val.name\n    case 'date':\n      return val.start\n    case 'rich_text':\n    case 'title':\n      return val.map((a: any) => a.plain_text).join('')\n    case 'text':\n      return data.plain_text\n    case 'files':\n      if (val.length < 1) return ''\n      return val[0][val[0].type].url\n    default:\n      return val\n  }\n}\n\n/**\n * 生成元数据\n * @param {*} page\n * @returns {Object}\n */\nexport function props(page: NotionDoc): DocProperties {\n  let data: any = {}\n  if (!Object.keys(page.properties).length) return data\n  let titleKey = ''\n  for (const key in page.properties) {\n    if (page.properties[key]?.type === 'title') {\n      titleKey = key\n    }\n    data[key] = getPropVal(page.properties[key])\n  }\n  // 单独处理title\n  if (!data.title) {\n    const titleVal = page.properties[titleKey].title\n    data.title = titleVal.map((a: any) => a.plain_text).join('')\n  }\n  // 单独处理urlname\n  if (!data.urlname) {\n    data.urlname = page.id\n  }\n  // date\n  if (!data.date) {\n    data.date = formatDate(page.created_time)\n  }\n  if (!data.updated) {\n    data.updated = formatDate(page.last_edited_time)\n  }\n  return data\n}\n\n/**\n * 格式化日期\n * @param date\n */\nexport function formatDate(date: Date | string) {\n  return moment(date).format('YYYY-MM-DD HH:mm:ss')\n}\n\nexport function genCatalog(page: NotionDoc, property: string): DocCatalog[] | undefined {\n  const catalog = page.properties[property]\n  if (!catalog) {\n    out.warning(`${page.properties.title} ${property} 属性缺失`)\n    return undefined\n  } else if (typeof catalog === 'string') {\n    // 单选\n    return [\n      {\n        title: catalog,\n        doc_id: page.id,\n      },\n    ]\n  } else if (Array.isArray(catalog)) {\n    // 多选\n    return catalog.map((item) => {\n      return {\n        title: item,\n        doc_id: page.id,\n      }\n    })\n  } else {\n    // 没有值\n    out.warning(\n      `${page.properties.title} 文档分类信息提取失败，${property} 字段只能是（Select）单选/（Multi-select）多选`,\n    )\n    return undefined\n  }\n}\n","import NotionClient from './client'\nimport { NotionConfig, NotionDoc } from './types'\nimport { BaseDoc } from '@elog/types'\nimport { out } from '@elog/shared'\n\nclass Notion {\n  config: NotionConfig\n  ctx: NotionClient\n  pages: NotionDoc[] = []\n  constructor(config: NotionConfig) {\n    this.config = config\n    this.ctx = new NotionClient(config)\n  }\n\n  /**\n   * 获取文章列表（不含详情）\n   */\n  async getDocList(): Promise<BaseDoc[]> {\n    out.info('正在获取文档列表，请稍等...')\n    const pages = await this.ctx.getPageList()\n    this.pages = pages\n    out.info('文档总数', String(this.pages.length))\n    return pages.map((page) => {\n      // 最后更新时间\n      const timestamp = new Date(page.last_edited_time).getTime()\n      return {\n        // 暂时只需要返回这些属性\n        id: page.id,\n        doc_id: page.id,\n        updated: timestamp,\n      }\n    })\n  }\n\n  /**\n   * 获取文章详情列表\n   * @param ids 需要下载的doc_id列表\n   */\n  async getDocDetailList(ids: string[]) {\n    return await this.ctx.getPageDetailList(this.pages, ids)\n  }\n}\n\nexport default Notion\n","import Notion from './core'\nexport * from './types'\n\nexport default Notion\n"]}