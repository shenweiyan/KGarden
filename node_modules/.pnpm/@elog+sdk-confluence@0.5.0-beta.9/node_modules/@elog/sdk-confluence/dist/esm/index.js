var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
import { out, request } from "@elog/shared";
var ConfluenceClient = class {
  constructor(config) {
    this.config = config;
    if (!config.baseUrl) {
      out.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11Confluence baseUrl");
      process.exit(-1);
    }
    this.config.user = config.user || process.env.CONFLUENCE_USER;
    this.config.password = config.password || process.env.CONFLUENCE_PWD;
    if (!this.config.user || !this.config.password) {
      out.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11Confluence\u8D26\u53F7\u6216\u5BC6\u7801");
      process.exit(-1);
    }
    this.auth = `${this.config.user}:${this.config.password}`;
  }
  /**
   * send api request to yuque
   * @param api
   * @param reqOpts
   */
  request(api, reqOpts) {
    return __async(this, null, function* () {
      let baseUrl = this.config.baseUrl;
      if (baseUrl.endsWith("/")) {
        baseUrl = baseUrl.slice(0, -1);
      }
      const url = `${baseUrl}/${api}`;
      const opts = __spreadValues({
        auth: this.auth
      }, reqOpts);
      const res = yield request(url, opts);
      return res.data;
    });
  }
  /**
   * 生成参数
   * @param post
   * @param id
   * @param parentId
   */
  processBody(post, id, parentId) {
    let params = {
      type: "page",
      title: post.properties.title,
      space: {
        key: this.config.spaceKey
      },
      ancestors: [
        {
          id: parentId || this.config.rootPageId
        }
      ],
      body: {
        wiki: {
          value: post.body_wiki,
          representation: "wiki"
        }
      },
      expand: ["ancestors"]
    };
    if (id) {
      params.id = id;
    }
    return params;
  }
  /**
   * 根据Id查询文章
   * @param id
   */
  getPageById(id) {
    return __async(this, null, function* () {
      return this.request(`content/${id}`, {
        method: "GET",
        data: {
          expand: "version.number"
        }
      });
    });
  }
  /**
   * 根据Title查询文章(精确查询)，没有则查询整个空间的文章列表
   * @param title
   */
  getPageByTitle(title) {
    return __async(this, null, function* () {
      return this.request("content", {
        method: "GET",
        data: {
          title,
          spaceKey: this.config.spaceKey
        }
      });
    });
  }
  /**
   * 根据parentId查询文章
   */
  getRootPageList() {
    return __async(this, null, function* () {
      var _a;
      const res = yield this.request(
        `search?cql=space=${this.config.spaceKey} and ancestor=${this.config.rootPageId}&limit=1000`,
        {
          method: "GET"
        }
      );
      if (!((_a = res.results) == null ? void 0 : _a.length)) {
        return [];
      }
      return res.results.map((item) => {
        return __spreadValues({}, item.content);
      });
    });
  }
  /**
   * 根据id查询文章
   * @param id
   */
  getPagesById(id) {
    return __async(this, null, function* () {
      return this.request(`search?cql=id=${id}`, { method: "GET" });
    });
  }
  /**
   * 创建文章
   * @param post
   * @param parentId
   */
  createPage(post, parentId) {
    return __async(this, null, function* () {
      const data = this.processBody(post, "", parentId);
      return this.request("content", { method: "POST", data });
    });
  }
  /**
   * 更新文档
   * @param post
   * @param id
   * @param version
   */
  updatePage(post, id, version) {
    return __async(this, null, function* () {
      const data = {
        type: "page",
        title: post.properties.title,
        id,
        space: {
          key: this.config.spaceKey
        },
        version: {
          number: version
        },
        body: {
          wiki: {
            value: post.body_wiki,
            representation: "wiki"
          }
        }
      };
      return yield this.request(`content/${id}`, { method: "PUT", data });
    });
  }
};
var client_default = ConfluenceClient;

// src/index.ts
var src_default = client_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map