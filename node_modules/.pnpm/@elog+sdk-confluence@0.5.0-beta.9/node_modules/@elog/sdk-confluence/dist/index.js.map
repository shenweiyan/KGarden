{"version":3,"sources":["../src/client.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { out, RequestOptions, request } from '@elog/shared'\nimport {\n  ConfluenceConfig,\n  WikiContent,\n  WikiPageDetail,\n  WikiPageList,\n  WikiPageListResponse,\n} from './types'\nimport { DocDetail } from '@elog/types'\n\nclass ConfluenceClient {\n  config: ConfluenceConfig\n  auth: string\n\n  constructor(config: ConfluenceConfig) {\n    this.config = config\n    if (!config.baseUrl) {\n      out.err('缺少参数', '缺少Confluence baseUrl')\n      process.exit(-1)\n    }\n    this.config.user = config.user || process.env.CONFLUENCE_USER!\n    this.config.password = config.password || process.env.CONFLUENCE_PWD!\n    if (!this.config.user || !this.config.password) {\n      out.err('缺少参数', '缺少Confluence账号或密码')\n      process.exit(-1)\n    }\n    this.auth = `${this.config.user}:${this.config.password}`\n  }\n\n  /**\n   * send api request to yuque\n   * @param api\n   * @param reqOpts\n   */\n  async request<T>(api: string, reqOpts: RequestOptions): Promise<T> {\n    let baseUrl = this.config.baseUrl\n    if (baseUrl.endsWith('/')) {\n      // 删除最后一个斜杠\n      baseUrl = baseUrl.slice(0, -1)\n    }\n    const url = `${baseUrl}/${api}`\n    const opts: RequestOptions = {\n      auth: this.auth,\n      ...reqOpts,\n    }\n    const res = await request<T>(url, opts)\n    return res.data\n  }\n\n  /**\n   * 生成参数\n   * @param post\n   * @param id\n   * @param parentId\n   */\n  processBody(post: DocDetail, id?: string, parentId?: string) {\n    let params: any = {\n      type: 'page',\n      title: post.properties.title,\n      space: {\n        key: this.config.spaceKey,\n      },\n      ancestors: [\n        {\n          id: parentId || this.config.rootPageId,\n        },\n      ],\n      body: {\n        wiki: {\n          value: post.body_wiki,\n          representation: 'wiki',\n        },\n      },\n      expand: ['ancestors'],\n    }\n    if (id) {\n      params.id = id\n    }\n    return params\n  }\n\n  /**\n   * 根据Id查询文章\n   * @param id\n   */\n  async getPageById(id: string) {\n    return this.request<WikiPageDetail>(`content/${id}`, {\n      method: 'GET',\n      data: {\n        expand: 'version.number',\n      },\n    })\n  }\n\n  /**\n   * 根据Title查询文章(精确查询)，没有则查询整个空间的文章列表\n   * @param title\n   */\n  async getPageByTitle(title: string) {\n    return this.request<WikiPageList>('content', {\n      method: 'GET',\n      data: {\n        title,\n        spaceKey: this.config.spaceKey,\n      },\n    })\n  }\n\n  /**\n   * 根据parentId查询文章\n   */\n  async getRootPageList(): Promise<WikiContent[]> {\n    const res = await this.request<WikiPageListResponse>(\n      `search?cql=space=${this.config.spaceKey} and ancestor=${this.config.rootPageId}&limit=1000`,\n      {\n        method: 'GET',\n      },\n    )\n    if (!res.results?.length) {\n      return []\n    }\n    return res.results.map((item) => {\n      return {\n        ...item.content,\n      }\n    })\n  }\n\n  /**\n   * 根据id查询文章\n   * @param id\n   */\n  async getPagesById(id: string) {\n    return this.request<WikiPageList>(`search?cql=id=${id}`, { method: 'GET' })\n  }\n\n  /**\n   * 创建文章\n   * @param post\n   * @param parentId\n   */\n  async createPage(post: DocDetail, parentId?: string) {\n    const data = this.processBody(post, '', parentId)\n    return this.request<WikiPageDetail>('content', { method: 'POST', data })\n  }\n\n  /**\n   * 更新文档\n   * @param post\n   * @param id\n   * @param version\n   */\n  async updatePage(post: DocDetail, id: string, version: number) {\n    const data = {\n      type: 'page',\n      title: post.properties.title,\n      id,\n      space: {\n        key: this.config.spaceKey,\n      },\n      version: {\n        number: version,\n      },\n      body: {\n        wiki: {\n          value: post.body_wiki,\n          representation: 'wiki',\n        },\n      },\n    }\n    return await this.request<WikiPageList>(`content/${id}`, { method: 'PUT', data })\n  }\n}\n\nexport default ConfluenceClient\n","import ConfluenceClient from './client'\n\nexport * from './types'\n\nexport default ConfluenceClient\n"]}