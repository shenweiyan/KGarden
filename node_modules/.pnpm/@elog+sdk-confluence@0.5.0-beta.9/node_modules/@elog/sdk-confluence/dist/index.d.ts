import { RequestOptions } from '@elog/shared';
import { DocDetail } from '@elog/types';

interface ConfluenceConfig {
    user: string;
    password: string;
    baseUrl: string;
    spaceKey: string;
    rootPageId: string;
    formatExt?: string;
}
interface Expandable {
    children: string;
    container: string;
    descendants: string;
    history: string;
    metadata: string;
    operations: string;
    restrictions: string;
    space: string;
    version: string;
}
interface Links {
    base: string;
    collection: string;
    context: string;
    edit: string;
    self: string;
    tinyui: string;
    webui: string;
}
interface Ancestor {
    _expandable: AncestorExpandable;
    _links: AncestorLinks;
    extensions: AncestorExtensions;
    id: string;
    status: string;
    title: string;
    type: string;
}
interface AncestorExpandable {
    ancestors: string;
    body: string;
    children: string;
    container: string;
    descendants: string;
    history: string;
    metadata: string;
    operations: string;
    restrictions: string;
    space: string;
    version: string;
}
interface AncestorLinks {
    edit: string;
    self: string;
    tinyui: string;
    webui: string;
}
interface AncestorExtensions {
    position: string;
}
interface Body {
    _expandable: BodyExpandable;
    storage: Storage;
    view: View;
}
interface BodyExpandable {
    anonymous_export_view: string;
    editor: string;
    export_view: string;
    styled_view: string;
}
interface Storage {
    _expandable: StorageExpandable;
    representation: string;
    value: string;
}
interface StorageExpandable {
    content: string;
}
interface View {
    _expandable: ViewExpandable;
    representation: string;
    value: string;
}
interface ViewExpandable {
    content: string;
    webresource: string;
}
/**
 * Page详情
 */
interface WikiPageDetail {
    _expandable: Expandable;
    _links: Links;
    ancestors: Ancestor[];
    body: Body;
    id: string;
    status: string;
    title: string;
    type: string;
    version: {
        number: number;
    };
}
interface WikiPageList {
    _links: Links;
    limit: number;
    results: WikiPageDetail[];
    size: number;
    start: number;
}
interface WikiMap {
    [name: string]: {
        id: string;
        status: string;
        title: string;
        type: string;
    };
}
interface WikiContent {
    id: string;
    status: string;
    title: string;
    type: string;
}
interface WikiPageListResponse {
    results: {
        content: WikiContent;
    }[];
}

declare class ConfluenceClient {
    config: ConfluenceConfig;
    auth: string;
    constructor(config: ConfluenceConfig);
    /**
     * send api request to yuque
     * @param api
     * @param reqOpts
     */
    request<T>(api: string, reqOpts: RequestOptions): Promise<T>;
    /**
     * 生成参数
     * @param post
     * @param id
     * @param parentId
     */
    processBody(post: DocDetail, id?: string, parentId?: string): any;
    /**
     * 根据Id查询文章
     * @param id
     */
    getPageById(id: string): Promise<WikiPageDetail>;
    /**
     * 根据Title查询文章(精确查询)，没有则查询整个空间的文章列表
     * @param title
     */
    getPageByTitle(title: string): Promise<WikiPageList>;
    /**
     * 根据parentId查询文章
     */
    getRootPageList(): Promise<WikiContent[]>;
    /**
     * 根据id查询文章
     * @param id
     */
    getPagesById(id: string): Promise<WikiPageList>;
    /**
     * 创建文章
     * @param post
     * @param parentId
     */
    createPage(post: DocDetail, parentId?: string): Promise<WikiPageDetail>;
    /**
     * 更新文档
     * @param post
     * @param id
     * @param version
     */
    updatePage(post: DocDetail, id: string, version: number): Promise<WikiPageList>;
}

export { Ancestor, AncestorExpandable, AncestorExtensions, AncestorLinks, Body, BodyExpandable, ConfluenceConfig, Expandable, Links, Storage, StorageExpandable, View, ViewExpandable, WikiContent, WikiMap, WikiPageDetail, WikiPageList, WikiPageListResponse, ConfluenceClient as default };
